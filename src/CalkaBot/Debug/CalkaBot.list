
CalkaBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009400  08009400  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009400  08009400  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009400  08009400  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  200001e0  080095e8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  080095e8  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f30  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038b2  00000000  00000000  0003a139  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003edb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c001  00000000  00000000  0003ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013160  00000000  00000000  0005bfe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090619  00000000  00000000  0006f141  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff75a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  000ff7d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080092a4 	.word	0x080092a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080092a4 	.word	0x080092a4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3a      	ldr	r3, [pc, #232]	; (800024c <MX_GPIO_Init+0x100>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a39      	ldr	r2, [pc, #228]	; (800024c <MX_GPIO_Init+0x100>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b37      	ldr	r3, [pc, #220]	; (800024c <MX_GPIO_Init+0x100>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b34      	ldr	r3, [pc, #208]	; (800024c <MX_GPIO_Init+0x100>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a33      	ldr	r2, [pc, #204]	; (800024c <MX_GPIO_Init+0x100>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b31      	ldr	r3, [pc, #196]	; (800024c <MX_GPIO_Init+0x100>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b2e      	ldr	r3, [pc, #184]	; (800024c <MX_GPIO_Init+0x100>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2d      	ldr	r2, [pc, #180]	; (800024c <MX_GPIO_Init+0x100>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b2b      	ldr	r3, [pc, #172]	; (800024c <MX_GPIO_Init+0x100>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b28      	ldr	r3, [pc, #160]	; (800024c <MX_GPIO_Init+0x100>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a27      	ldr	r2, [pc, #156]	; (800024c <MX_GPIO_Init+0x100>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b25      	ldr	r3, [pc, #148]	; (800024c <MX_GPIO_Init+0x100>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4822      	ldr	r0, [pc, #136]	; (8000250 <MX_GPIO_Init+0x104>)
 80001c8:	f000 ff93 	bl	80010f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ma2_Pin|Ma1_Pin|STBY_Pin|Mb1_Pin
 80001cc:	2200      	movs	r2, #0
 80001ce:	217c      	movs	r1, #124	; 0x7c
 80001d0:	4820      	ldr	r0, [pc, #128]	; (8000254 <MX_GPIO_Init+0x108>)
 80001d2:	f000 ff8e 	bl	80010f2 <HAL_GPIO_WritePin>
                          |Mb2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4818      	ldr	r0, [pc, #96]	; (8000250 <MX_GPIO_Init+0x104>)
 80001f0:	f000 fe0e 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = Ma2_Pin|Ma1_Pin|STBY_Pin|Mb1_Pin
 80001f4:	237c      	movs	r3, #124	; 0x7c
 80001f6:	613b      	str	r3, [r7, #16]
                          |Mb2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4812      	ldr	r0, [pc, #72]	; (8000254 <MX_GPIO_Init+0x108>)
 800020c:	f000 fe00 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIS_R_Pin|DIS_L_Pin;
 8000210:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021a:	2300      	movs	r3, #0
 800021c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000226:	f000 fdf3 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 800022a:	2310      	movs	r3, #16
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <MX_GPIO_Init+0x110>)
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4619      	mov	r1, r3
 800023c:	4806      	ldr	r0, [pc, #24]	; (8000258 <MX_GPIO_Init+0x10c>)
 800023e:	f000 fde7 	bl	8000e10 <HAL_GPIO_Init>

}
 8000242:	bf00      	nop
 8000244:	3720      	adds	r7, #32
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	40011000 	.word	0x40011000
 8000254:	40010800 	.word	0x40010800
 8000258:	40010c00 	.word	0x40010c00
 800025c:	10110000 	.word	0x10110000

08000260 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000266:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <MX_I2C1_Init+0x54>)
 8000268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_I2C1_Init+0x50>)
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <MX_I2C1_Init+0x58>)
 800026e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_I2C1_Init+0x50>)
 800027e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_I2C1_Init+0x50>)
 800029e:	f000 ff59 	bl	8001154 <HAL_I2C_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 f99d 	bl	80005e6 <Error_Handler>
  }

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000042c 	.word	0x2000042c
 80002b4:	40005400 	.word	0x40005400
 80002b8:	000186a0 	.word	0x000186a0

080002bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <HAL_I2C_MspInit+0x70>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d123      	bne.n	8000324 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <HAL_I2C_MspInit+0x74>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a13      	ldr	r2, [pc, #76]	; (8000330 <HAL_I2C_MspInit+0x74>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <HAL_I2C_MspInit+0x74>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002f4:	23c0      	movs	r3, #192	; 0xc0
 80002f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002f8:	2312      	movs	r3, #18
 80002fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fc:	2303      	movs	r3, #3
 80002fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4619      	mov	r1, r3
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <HAL_I2C_MspInit+0x78>)
 8000308:	f000 fd82 	bl	8000e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <HAL_I2C_MspInit+0x74>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <HAL_I2C_MspInit+0x74>)
 8000312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000316:	61d3      	str	r3, [r2, #28]
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <HAL_I2C_MspInit+0x74>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000324:	bf00      	nop
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40005400 	.word	0x40005400
 8000330:	40021000 	.word	0x40021000
 8000334:	40010c00 	.word	0x40010c00

08000338 <goForward>:
	 HAL_GPIO_WritePin(Mb1_GPIO_Port, Mb1_Pin, SET);
	 HAL_GPIO_WritePin(Mb2_GPIO_Port, Mb2_Pin, RESET);
	 return 1;	//accel tutaj bedzie sprawdzany
}

int goForward(int speed){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	//speed = map(speed, 100, 1000);
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <goForward+0x4c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	639a      	str	r2, [r3, #56]	; 0x38
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, speed);
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <goForward+0x50>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	639a      	str	r2, [r3, #56]	; 0x38

	 HAL_GPIO_WritePin(Ma1_GPIO_Port, Ma1_Pin, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2108      	movs	r1, #8
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <goForward+0x54>)
 8000356:	f000 fecc 	bl	80010f2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Ma2_GPIO_Port, Ma2_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2104      	movs	r1, #4
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <goForward+0x54>)
 8000360:	f000 fec7 	bl	80010f2 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(Mb1_GPIO_Port, Mb1_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	4808      	ldr	r0, [pc, #32]	; (800038c <goForward+0x54>)
 800036a:	f000 fec2 	bl	80010f2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Mb2_GPIO_Port, Mb2_Pin, SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <goForward+0x54>)
 8000374:	f000 febd 	bl	80010f2 <HAL_GPIO_WritePin>
	 return 1;
 8000378:	2301      	movs	r3, #1
}
 800037a:	4618      	mov	r0, r3
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200004c8 	.word	0x200004c8
 8000388:	20000480 	.word	0x20000480
 800038c:	40010800 	.word	0x40010800

08000390 <goLeft>:

int goLeft(int speed){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	//speed = map(speed, 100, 1000);
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <goLeft+0x4c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, speed);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <goLeft+0x50>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(Ma1_GPIO_Port, Ma1_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2108      	movs	r1, #8
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <goLeft+0x54>)
 80003ae:	f000 fea0 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ma2_GPIO_Port, Ma2_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2104      	movs	r1, #4
 80003b6:	480b      	ldr	r0, [pc, #44]	; (80003e4 <goLeft+0x54>)
 80003b8:	f000 fe9b 	bl	80010f2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Mb1_GPIO_Port, Mb1_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2120      	movs	r1, #32
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <goLeft+0x54>)
 80003c2:	f000 fe96 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Mb2_GPIO_Port, Mb2_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	4806      	ldr	r0, [pc, #24]	; (80003e4 <goLeft+0x54>)
 80003cc:	f000 fe91 	bl	80010f2 <HAL_GPIO_WritePin>
	return 1;
 80003d0:	2301      	movs	r3, #1
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200004c8 	.word	0x200004c8
 80003e0:	20000480 	.word	0x20000480
 80003e4:	40010800 	.word	0x40010800

080003e8 <goRight>:

int goRight(int speed){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	//speed = map(speed, 100, 1000);
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <goRight+0x4c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, speed);
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <goRight+0x50>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(Ma1_GPIO_Port, Ma1_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2108      	movs	r1, #8
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <goRight+0x54>)
 8000406:	f000 fe74 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Ma2_GPIO_Port, Ma2_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2104      	movs	r1, #4
 800040e:	480b      	ldr	r0, [pc, #44]	; (800043c <goRight+0x54>)
 8000410:	f000 fe6f 	bl	80010f2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Mb1_GPIO_Port, Mb1_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <goRight+0x54>)
 800041a:	f000 fe6a 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Mb2_GPIO_Port, Mb2_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <goRight+0x54>)
 8000424:	f000 fe65 	bl	80010f2 <HAL_GPIO_WritePin>
	return 1;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200004c8 	.word	0x200004c8
 8000438:	20000480 	.word	0x20000480
 800043c:	40010800 	.word	0x40010800

08000440 <TIM2_IRQHandler>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
}*/
// Inty od Timera 2 :)
void TIM2_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <TIM2_IRQHandler+0x10>)
 8000446:	f003 f99b 	bl	8003780 <HAL_TIM_IRQHandler>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200004c8 	.word	0x200004c8

08000454 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000462:	f000 fe5e 	bl	8001122 <HAL_GPIO_TogglePin>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40011000 	.word	0x40011000

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fb5a 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f858 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f7ff fe64 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000484:	f007 fb2e 	bl	8007ae4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000488:	f000 f9c0 	bl	800080c <MX_TIM2_Init>
  MX_I2C1_Init();
 800048c:	f7ff fee8 	bl	8000260 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000490:	f000 fa32 	bl	80008f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000494:	2104      	movs	r1, #4
 8000496:	4822      	ldr	r0, [pc, #136]	; (8000520 <main+0xac>)
 8000498:	f003 f8d0 	bl	800363c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800049c:	2104      	movs	r1, #4
 800049e:	4821      	ldr	r0, [pc, #132]	; (8000524 <main+0xb0>)
 80004a0:	f003 f8cc 	bl	800363c <HAL_TIM_PWM_Start>


  //uint8_t DataToSend[40];			// Tablica zawierajaca dane do wyslania
  //uint8_t MessageCounter = 0; 		// Licznik wyslanych wiadomosci
  //uint8_t MessageLength = 0; 		// Zawiera dlugosc wysylanej wiadomosci
  HAL_TIM_Base_Start_IT(&htim2);
 80004a4:	481e      	ldr	r0, [pc, #120]	; (8000520 <main+0xac>)
 80004a6:	f003 f81f 	bl	80034e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <main+0xb0>)
 80004ac:	f003 f81c 	bl	80034e8 <HAL_TIM_Base_Start_IT>
  //while(MPU6050_Init(&hi2c2));
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2110      	movs	r1, #16
 80004b4:	481c      	ldr	r0, [pc, #112]	; (8000528 <main+0xb4>)
 80004b6:	f000 fe1c 	bl	80010f2 <HAL_GPIO_WritePin>
	  			uint16_t PomiarADC 	= HAL_ADC_GetValue(&hadc1);						// Pobranie zmierzonej wartosci
	  			uint16_t len 		= sprintf(data, "%d\n", PomiarADC);
	  			CDC_Transmit_FS(data, len);
	  			HAL_ADC_Start(&hadc1);												//Rozpoczecie nowej konwersji
	  	}*/
	  if(!HAL_GPIO_ReadPin(DIS_L_GPIO_Port, DIS_L_Pin) && !HAL_GPIO_ReadPin(DIS_R_GPIO_Port, DIS_R_Pin)){
 80004ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004be:	481b      	ldr	r0, [pc, #108]	; (800052c <main+0xb8>)
 80004c0:	f000 fe00 	bl	80010c4 <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d10c      	bne.n	80004e4 <main+0x70>
 80004ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ce:	4817      	ldr	r0, [pc, #92]	; (800052c <main+0xb8>)
 80004d0:	f000 fdf8 	bl	80010c4 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d104      	bne.n	80004e4 <main+0x70>
	  	  goForward(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004de:	f7ff ff2b 	bl	8000338 <goForward>
 80004e2:	e01c      	b.n	800051e <main+0xaa>
	  }
	  else if(!HAL_GPIO_ReadPin(DIS_L_GPIO_Port, DIS_L_Pin)){
 80004e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e8:	4810      	ldr	r0, [pc, #64]	; (800052c <main+0xb8>)
 80004ea:	f000 fdeb 	bl	80010c4 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d104      	bne.n	80004fe <main+0x8a>
		  goRight(1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	f7ff ff76 	bl	80003e8 <goRight>
 80004fc:	e7dd      	b.n	80004ba <main+0x46>
	  }
	  else if(!HAL_GPIO_ReadPin(DIS_R_GPIO_Port, DIS_R_Pin)){
 80004fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0xb8>)
 8000504:	f000 fdde 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <main+0xa4>
		  goLeft(1000);
 800050e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000512:	f7ff ff3d 	bl	8000390 <goLeft>
 8000516:	e7d0      	b.n	80004ba <main+0x46>
	  }
	  else{
		  goLeft(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f7ff ff39 	bl	8000390 <goLeft>
	  if(!HAL_GPIO_ReadPin(DIS_L_GPIO_Port, DIS_L_Pin) && !HAL_GPIO_ReadPin(DIS_R_GPIO_Port, DIS_R_Pin)){
 800051e:	e7cc      	b.n	80004ba <main+0x46>
 8000520:	200004c8 	.word	0x200004c8
 8000524:	20000480 	.word	0x20000480
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 ff70 	bl	8008424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800057c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	4618      	mov	r0, r3
 8000588:	f002 faa0 	bl	8002acc <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000592:	f000 f828 	bl	80005e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fd0a 	bl	8002fcc <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005be:	f000 f812 	bl	80005e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005c2:	2310      	movs	r3, #16
 80005c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe84 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005da:	f000 f804 	bl	80005e6 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <HardFault_Handler+0x4>

0800066a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <MemManage_Handler+0x4>

08000670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <BusFault_Handler+0x4>

08000676 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <UsageFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 fa8a 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006b2:	f000 ffb8 	bl	8001626 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200011a8 	.word	0x200011a8

080006c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e00a      	b.n	80006e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006d2:	f3af 8000 	nop.w
 80006d6:	4601      	mov	r1, r0
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	b2ca      	uxtb	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3301      	adds	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dbf0      	blt.n	80006d2 <_read+0x12>
	}

return len;
 80006f0:	687b      	ldr	r3, [r7, #4]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e009      	b.n	8000720 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbf1      	blt.n	800070c <_write+0x12>
	}
	return len;
 8000728:	687b      	ldr	r3, [r7, #4]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_close>:

int _close(int file)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
	return -1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000758:	605a      	str	r2, [r3, #4]
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_isatty>:

int _isatty(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
	return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f007 fe04 	bl	80083d0 <__errno>
 80007c8:	4602      	mov	r2, r0
 80007ca:	230c      	movs	r3, #12
 80007cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	200001fc 	.word	0x200001fc
 80007fc:	20001498 	.word	0x20001498

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_TIM2_Init+0xe8>)
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_TIM2_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_TIM2_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000864:	4823      	ldr	r0, [pc, #140]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000866:	f002 fdef 	bl	8003448 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000870:	f7ff feb9 	bl	80005e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	4619      	mov	r1, r3
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000882:	f003 f943 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800088c:	f7ff feab 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000890:	4818      	ldr	r0, [pc, #96]	; (80008f4 <MX_TIM2_Init+0xe8>)
 8000892:	f002 fe7b 	bl	800358c <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800089c:	f7ff fea3 	bl	80005e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_TIM2_Init+0xe8>)
 80008b0:	f003 fcac 	bl	800420c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008ba:	f7ff fe94 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2204      	movs	r2, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <MX_TIM2_Init+0xe8>)
 80008d6:	f003 f85b 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008e0:	f7ff fe81 	bl	80005e6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <MX_TIM2_Init+0xe8>)
 80008e6:	f000 f8ad 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200004c8 	.word	0x200004c8

080008f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08e      	sub	sp, #56	; 0x38
 80008fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
 8000924:	615a      	str	r2, [r3, #20]
 8000926:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_TIM3_Init+0xe4>)
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <MX_TIM3_Init+0xe8>)
 800092c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_TIM3_Init+0xe4>)
 8000930:	2230      	movs	r2, #48	; 0x30
 8000932:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_TIM3_Init+0xe4>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_TIM3_Init+0xe4>)
 800093c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_TIM3_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_TIM3_Init+0xe4>)
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <MX_TIM3_Init+0xe4>)
 8000950:	f002 fd7a 	bl	8003448 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800095a:	f7ff fe44 	bl	80005e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000968:	4619      	mov	r1, r3
 800096a:	481c      	ldr	r0, [pc, #112]	; (80009dc <MX_TIM3_Init+0xe4>)
 800096c:	f003 f8ce 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000976:	f7ff fe36 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <MX_TIM3_Init+0xe4>)
 800097c:	f002 fe06 	bl	800358c <HAL_TIM_PWM_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000986:	f7ff fe2e 	bl	80005e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4619      	mov	r1, r3
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_TIM3_Init+0xe4>)
 800099a:	f003 fc37 	bl	800420c <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009a4:	f7ff fe1f 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a8:	2360      	movs	r3, #96	; 0x60
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <MX_TIM3_Init+0xe4>)
 80009c0:	f002 ffe6 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ca:	f7ff fe0c 	bl	80005e6 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_TIM3_Init+0xe4>)
 80009d0:	f000 f838 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000480 	.word	0x20000480
 80009e0:	40000400 	.word	0x40000400

080009e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f4:	d10c      	bne.n	8000a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a0e:	e010      	b.n	8000a32 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x5c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10b      	bne.n	8000a32 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_TIM_Base_MspInit+0x58>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40000400 	.word	0x40000400

08000a44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a62:	d118      	bne.n	8000a96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <HAL_TIM_MspPostInit+0x98>)
 8000a90:	f000 f9be 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a94:	e01c      	b.n	8000ad0 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <HAL_TIM_MspPostInit+0x9c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d117      	bne.n	8000ad0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_TIM_MspPostInit+0x94>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMB_Pin;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMB_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <HAL_TIM_MspPostInit+0x98>)
 8000acc:	f000 f9a0 	bl	8000e10 <HAL_GPIO_Init>
}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40000400 	.word	0x40000400

08000ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ae4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ae6:	e003      	b.n	8000af0 <LoopCopyDataInit>

08000ae8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aee:	3104      	adds	r1, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000af4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af8:	d3f6      	bcc.n	8000ae8 <CopyDataInit>
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000afc:	e002      	b.n	8000b04 <LoopFillZerobss>

08000afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b00:	f842 3b04 	str.w	r3, [r2], #4

08000b04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b08:	d3f9      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b0a:	f7ff fe79 	bl	8000800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f007 fc65 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fcaf 	bl	8000474 <main>
  bx lr
 8000b16:	4770      	bx	lr
  ldr r3, =_sidata
 8000b18:	08009408 	.word	0x08009408
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b20:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000b24:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000b28:	20001498 	.word	0x20001498

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x28>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f923 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fd52 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f93b 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	f000 f903 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000510 	.word	0x20000510

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000510 	.word	0x20000510

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4906      	ldr	r1, [pc, #24]	; (8000c8c <__NVIC_EnableIRQ+0x34>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f7ff ff90 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff2d 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff42 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff35 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b08b      	sub	sp, #44	; 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e127      	b.n	8001074 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e24:	2201      	movs	r2, #1
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8116 	bne.w	800106e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d034      	beq.n	8000eb4 <HAL_GPIO_Init+0xa4>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d80d      	bhi.n	8000e6a <HAL_GPIO_Init+0x5a>
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x9a>
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d804      	bhi.n	8000e60 <HAL_GPIO_Init+0x50>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d031      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d01c      	beq.n	8000e98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e5e:	e048      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d043      	beq.n	8000eec <HAL_GPIO_Init+0xdc>
 8000e64:	2b11      	cmp	r3, #17
 8000e66:	d01b      	beq.n	8000ea0 <HAL_GPIO_Init+0x90>
          break;
 8000e68:	e043      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e6a:	4a89      	ldr	r2, [pc, #548]	; (8001090 <HAL_GPIO_Init+0x280>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d026      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e70:	4a87      	ldr	r2, [pc, #540]	; (8001090 <HAL_GPIO_Init+0x280>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d806      	bhi.n	8000e84 <HAL_GPIO_Init+0x74>
 8000e76:	4a87      	ldr	r2, [pc, #540]	; (8001094 <HAL_GPIO_Init+0x284>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d020      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e7c:	4a86      	ldr	r2, [pc, #536]	; (8001098 <HAL_GPIO_Init+0x288>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01d      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
          break;
 8000e82:	e036      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e84:	4a85      	ldr	r2, [pc, #532]	; (800109c <HAL_GPIO_Init+0x28c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e8a:	4a85      	ldr	r2, [pc, #532]	; (80010a0 <HAL_GPIO_Init+0x290>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d016      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
 8000e90:	4a84      	ldr	r2, [pc, #528]	; (80010a4 <HAL_GPIO_Init+0x294>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0xae>
          break;
 8000e96:	e02c      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e028      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e023      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e01e      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e019      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e012      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	611a      	str	r2, [r3, #16]
          break;
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	615a      	str	r2, [r3, #20]
          break;
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d801      	bhi.n	8000efc <HAL_GPIO_Init+0xec>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	e001      	b.n	8000f00 <HAL_GPIO_Init+0xf0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3304      	adds	r3, #4
 8000f00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d802      	bhi.n	8000f0e <HAL_GPIO_Init+0xfe>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x104>
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3b08      	subs	r3, #8
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	6a39      	ldr	r1, [r7, #32]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 8096 	beq.w	800106e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f42:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x298>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f5a:	4a54      	ldr	r2, [pc, #336]	; (80010ac <HAL_GPIO_Init+0x29c>)
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_GPIO_Init+0x2a0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x19e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_GPIO_Init+0x2a4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x19a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x196>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2ac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x192>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x1a0>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc0:	493a      	ldr	r1, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x29c>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4938      	ldr	r1, [pc, #224]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
 8000fe6:	e006      	b.n	8000ff6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4933      	ldr	r1, [pc, #204]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	492e      	ldr	r1, [pc, #184]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4929      	ldr	r1, [pc, #164]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800101a:	4013      	ands	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	4924      	ldr	r1, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	43db      	mvns	r3, r3
 8001040:	491f      	ldr	r1, [pc, #124]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001042:	4013      	ands	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	491a      	ldr	r1, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	60cb      	str	r3, [r1, #12]
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	43db      	mvns	r3, r3
 8001068:	4915      	ldr	r1, [pc, #84]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 800106a:	4013      	ands	r3, r2
 800106c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f aed0 	bne.w	8000e24 <HAL_GPIO_Init+0x14>
  }
}
 8001084:	bf00      	nop
 8001086:	372c      	adds	r7, #44	; 0x2c
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	10210000 	.word	0x10210000
 8001094:	10110000 	.word	0x10110000
 8001098:	10120000 	.word	0x10120000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10320000 	.word	0x10320000
 80010a4:	10220000 	.word	0x10220000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800110e:	e003      	b.n	8001118 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43d9      	mvns	r1, r3
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	400b      	ands	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e11f      	b.n	80013a6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d106      	bne.n	8001180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f89e 	bl	80002bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2224      	movs	r2, #36	; 0x24
 8001184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011b8:	f002 f85e 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a7b      	ldr	r2, [pc, #492]	; (80013b0 <HAL_I2C_Init+0x25c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d807      	bhi.n	80011d8 <HAL_I2C_Init+0x84>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a7a      	ldr	r2, [pc, #488]	; (80013b4 <HAL_I2C_Init+0x260>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	bf94      	ite	ls
 80011d0:	2301      	movls	r3, #1
 80011d2:	2300      	movhi	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	e006      	b.n	80011e6 <HAL_I2C_Init+0x92>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <HAL_I2C_Init+0x264>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0db      	b.n	80013a6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_I2C_Init+0x268>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a64      	ldr	r2, [pc, #400]	; (80013b0 <HAL_I2C_Init+0x25c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d802      	bhi.n	8001228 <HAL_I2C_Init+0xd4>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	e009      	b.n	800123c <HAL_I2C_Init+0xe8>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <HAL_I2C_Init+0x26c>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	099b      	lsrs	r3, r3, #6
 800123a:	3301      	adds	r3, #1
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800124e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4956      	ldr	r1, [pc, #344]	; (80013b0 <HAL_I2C_Init+0x25c>)
 8001258:	428b      	cmp	r3, r1
 800125a:	d80d      	bhi.n	8001278 <HAL_I2C_Init+0x124>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e59      	subs	r1, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fbb1 f3f3 	udiv	r3, r1, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	2b04      	cmp	r3, #4
 8001272:	bf38      	it	cc
 8001274:	2304      	movcc	r3, #4
 8001276:	e04f      	b.n	8001318 <HAL_I2C_Init+0x1c4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d111      	bne.n	80012a4 <HAL_I2C_Init+0x150>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e58      	subs	r0, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	e012      	b.n	80012ca <HAL_I2C_Init+0x176>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	0099      	lsls	r1, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_I2C_Init+0x17e>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e022      	b.n	8001318 <HAL_I2C_Init+0x1c4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10e      	bne.n	80012f8 <HAL_I2C_Init+0x1a4>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1e58      	subs	r0, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6859      	ldr	r1, [r3, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	440b      	add	r3, r1
 80012e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f6:	e00f      	b.n	8001318 <HAL_I2C_Init+0x1c4>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e58      	subs	r0, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	0099      	lsls	r1, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	fbb0 f3f3 	udiv	r3, r0, r3
 800130e:	3301      	adds	r3, #1
 8001310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	6809      	ldr	r1, [r1, #0]
 800131c:	4313      	orrs	r3, r2
 800131e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6911      	ldr	r1, [r2, #16]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68d2      	ldr	r2, [r2, #12]
 8001352:	4311      	orrs	r1, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	000186a0 	.word	0x000186a0
 80013b4:	001e847f 	.word	0x001e847f
 80013b8:	003d08ff 	.word	0x003d08ff
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af06      	add	r7, sp, #24
 80013ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0fd      	b.n	80015d2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f006 fd46 	bl	8007e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 ff9b 	bl	8004338 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	1d33      	adds	r3, r6, #4
 800141a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f002 ff65 	bl	80042ec <USB_CoreInit>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0ce      	b.n	80015d2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ff96 	bl	800436c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e04c      	b.n	80014e0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3301      	adds	r3, #1
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b298      	uxth	r0, r3
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3336      	adds	r3, #54	; 0x36
 8001484:	4602      	mov	r2, r0
 8001486:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	3303      	adds	r3, #3
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800149e:	7bfa      	ldrb	r2, [r7, #15]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3338      	adds	r3, #56	; 0x38
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	333c      	adds	r3, #60	; 0x3c
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	3340      	adds	r3, #64	; 0x40
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3ad      	bcc.n	8001446 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e044      	b.n	800157a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3b5      	bcc.n	80014f0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	687e      	ldr	r6, [r7, #4]
 800158c:	466d      	mov	r5, sp
 800158e:	f106 0410 	add.w	r4, r6, #16
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	602b      	str	r3, [r5, #0]
 800159a:	1d33      	adds	r3, r6, #4
 800159c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f002 fef0 	bl	8004384 <USB_DevInit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00d      	b.n	80015d2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fe8a 	bl	80062e4 <USB_DevDisconnect>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_PCD_Start+0x16>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e016      	b.n	800161e <HAL_PCD_Start+0x44>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fe85 	bl	800430c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f006 feac 	bl	8008362 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f004 fe5e 	bl	80062d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b088      	sub	sp, #32
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fe60 	bl	80062f8 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001642:	d102      	bne.n	800164a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fb61 	bl	8001d0c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fe52 	bl	80062f8 <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165e:	d112      	bne.n	8001686 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001672:	b292      	uxth	r2, r2
 8001674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f006 fc7a 	bl	8007f72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800167e:	2100      	movs	r1, #0
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f925 	bl	80018d0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fe34 	bl	80062f8 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169a:	d10b      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016ae:	b292      	uxth	r2, r2
 80016b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 fe1d 	bl	80062f8 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c8:	d10b      	bne.n	80016e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016dc:	b292      	uxth	r2, r2
 80016de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 fe06 	bl	80062f8 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f6:	d126      	bne.n	8001746 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0204 	bic.w	r2, r2, #4
 800170a:	b292      	uxth	r2, r2
 800170c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0208 	bic.w	r2, r2, #8
 8001722:	b292      	uxth	r2, r2
 8001724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f006 fc5b 	bl	8007fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fdd4 	bl	80062f8 <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800175a:	f040 8084 	bne.w	8001866 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	77fb      	strb	r3, [r7, #31]
 8001762:	e011      	b.n	8001788 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	441a      	add	r2, r3
 8001770:	7ffb      	ldrb	r3, [r7, #31]
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	b292      	uxth	r2, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	f107 0120 	add.w	r1, r7, #32
 800177c:	440b      	add	r3, r1
 800177e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	3301      	adds	r3, #1
 8001786:	77fb      	strb	r3, [r7, #31]
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d9ea      	bls.n	8001764 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	b292      	uxth	r2, r2
 80017ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017be:	bf00      	nop
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f6      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	77fb      	strb	r3, [r7, #31]
 80017ee:	e010      	b.n	8001812 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	7ffa      	ldrb	r2, [r7, #31]
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	440a      	add	r2, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	f107 0120 	add.w	r1, r7, #32
 8001804:	440b      	add	r3, r1
 8001806:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800180a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	3301      	adds	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9eb      	bls.n	80017f0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0208 	orr.w	r2, r2, #8
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0204 	orr.w	r2, r2, #4
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f006 fba5 	bl	8007fb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fd44 	bl	80062f8 <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187a:	d10e      	bne.n	800189a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f006 fb5e 	bl	8007f56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fd2a 	bl	80062f8 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ae:	d10b      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_PCD_SetAddress+0x1a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e013      	b.n	8001912 <HAL_PCD_SetAddress+0x42>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fcd1 	bl	80062aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	4608      	mov	r0, r1
 8001924:	4611      	mov	r1, r2
 8001926:	461a      	mov	r2, r3
 8001928:	4603      	mov	r3, r0
 800192a:	70fb      	strb	r3, [r7, #3]
 800192c:	460b      	mov	r3, r1
 800192e:	803b      	strh	r3, [r7, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800193c:	2b00      	cmp	r3, #0
 800193e:	da0e      	bge.n	800195e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	705a      	strb	r2, [r3, #1]
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	b2da      	uxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	78ba      	ldrb	r2, [r7, #2]
 8001992:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a6:	78bb      	ldrb	r3, [r7, #2]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d102      	bne.n	80019b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_PCD_EP_Open+0xa6>
 80019bc:	2302      	movs	r3, #2
 80019be:	e00e      	b.n	80019de <HAL_PCD_EP_Open+0xc4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fcf8 	bl	80043c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019dc:	7afb      	ldrb	r3, [r7, #11]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da0e      	bge.n	8001a18 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]
 8001a16:	e00e      	b.n	8001a36 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 0207 	and.w	r2, r3, #7
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_EP_Close+0x6a>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e00e      	b.n	8001a6e <HAL_PCD_EP_Close+0x88>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 f81a 	bl	8004a98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 0207 	and.w	r2, r3, #7
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6979      	ldr	r1, [r7, #20]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f9cc 	bl	8004e70 <USB_EPStartXfer>
 8001ad8:	e005      	b.n	8001ae6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f9c5 	bl	8004e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0207 	and.w	r2, r3, #7
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2201      	movs	r2, #1
 8001b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 f972 	bl	8004e70 <USB_EPStartXfer>
 8001b8c:	e005      	b.n	8001b9a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6979      	ldr	r1, [r7, #20]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f96b 	bl	8004e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d901      	bls.n	8001bc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e04c      	b.n	8001c5c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da0e      	bge.n	8001be8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
 8001be6:	e00c      	b.n	8001c02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_PCD_EP_SetStall+0x7e>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e01c      	b.n	8001c5c <HAL_PCD_EP_SetStall+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fa3d 	bl	80060b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d108      	bne.n	8001c52 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f004 fb62 	bl	8006316 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 020f 	and.w	r2, r3, #15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d901      	bls.n	8001c82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e040      	b.n	8001d04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da0e      	bge.n	8001ca8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	705a      	strb	r2, [r3, #1]
 8001ca6:	e00e      	b.n	8001cc6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 0207 	and.w	r2, r3, #7
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_PCD_EP_ClrStall+0x82>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e00e      	b.n	8001d04 <HAL_PCD_EP_ClrStall+0xa0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fa2b 	bl	8006150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	; 0x38
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d14:	e2df      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 8158 	bne.w	8001fe6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d152      	bne.n	8001de6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d50:	81fb      	strh	r3, [r7, #14]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3328      	adds	r3, #40	; 0x28
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	441a      	add	r2, r3
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001da4:	2100      	movs	r1, #0
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f006 f8bb 	bl	8007f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 828e 	beq.w	80022d6 <PCD_EP_ISR_Handler+0x5ca>
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 8289 	bne.w	80022d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001de4:	e277      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001df6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d034      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	3306      	adds	r3, #6
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f004 fab8 	bl	80063b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e50:	4013      	ands	r3, r2
 8001e52:	823b      	strh	r3, [r7, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	8a3a      	ldrh	r2, [r7, #16]
 8001e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f006 f830 	bl	8007ec8 <HAL_PCD_SetupStageCallback>
 8001e68:	e235      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f280 8231 	bge.w	80022d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e80:	4013      	ands	r3, r2
 8001e82:	83bb      	strh	r3, [r7, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	8bba      	ldrh	r2, [r7, #28]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <PCD_EP_ISR_Handler+0x1ee>
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	6959      	ldr	r1, [r3, #20]
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f004 fa68 	bl	80063b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	441a      	add	r2, r3
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f005 fff9 	bl	8007eec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d112      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x23c>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	e02f      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x29c>
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001f4e:	d813      	bhi.n	8001f78 <PCD_EP_ISR_Handler+0x26c>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <PCD_EP_ISR_Handler+0x25e>
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	3301      	adds	r3, #1
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	e017      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x29c>
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <PCD_EP_ISR_Handler+0x286>
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
 8001f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb8:	827b      	strh	r3, [r7, #18]
 8001fba:	8a7b      	ldrh	r3, [r7, #18]
 8001fbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fc0:	827b      	strh	r3, [r7, #18]
 8001fc2:	8a7b      	ldrh	r3, [r7, #18]
 8001fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fc8:	827b      	strh	r3, [r7, #18]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	8a7b      	ldrh	r3, [r7, #18]
 8001fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	8013      	strh	r3, [r2, #0]
 8001fe4:	e177      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ff8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f280 80ea 	bge.w	80021d6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002018:	4013      	ands	r3, r2
 800201a:	853b      	strh	r3, [r7, #40]	; 0x28
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800202c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002030:	b292      	uxth	r2, r2
 8002032:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002034:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d122      	bne.n	8002098 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	3306      	adds	r3, #6
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800207c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	88da      	ldrh	r2, [r3, #6]
 8002090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002092:	f004 f98f 	bl	80063b4 <USB_ReadPMA>
 8002096:	e07c      	b.n	8002192 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d108      	bne.n	80020b2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020a2:	461a      	mov	r2, r3
 80020a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f923 	bl	80022f2 <HAL_PCD_EP_DB_Receive>
 80020ac:	4603      	mov	r3, r0
 80020ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020b0:	e06f      	b.n	8002192 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	441a      	add	r2, r3
 80020dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d021      	beq.n	8002150 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3302      	adds	r3, #2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002134:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002136:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02a      	beq.n	8002192 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	6959      	ldr	r1, [r3, #20]
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	891a      	ldrh	r2, [r3, #8]
 8002148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800214a:	f004 f933 	bl	80063b4 <USB_ReadPMA>
 800214e:	e020      	b.n	8002192 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	3306      	adds	r3, #6
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002178:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800217a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	6959      	ldr	r1, [r3, #20]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	895a      	ldrh	r2, [r3, #10]
 800218c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800218e:	f004 f911 	bl	80063b4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002198:	441a      	add	r2, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a4:	441a      	add	r2, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <PCD_EP_ISR_Handler+0x4b0>
 80021b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d206      	bcs.n	80021ca <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f005 fe92 	bl	8007eec <HAL_PCD_DataOutStageCallback>
 80021c8:	e005      	b.n	80021d6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 fe4d 	bl	8004e70 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d07a      	beq.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80021e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	843b      	strh	r3, [r7, #32]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	441a      	add	r2, r3
 800221e:	8c3b      	ldrh	r3, [r7, #32]
 8002220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002228:	b29b      	uxth	r3, r3
 800222a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	78db      	ldrb	r3, [r3, #3]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d108      	bne.n	8002246 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002238:	2b02      	cmp	r3, #2
 800223a:	d146      	bne.n	80022ca <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800223c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d141      	bne.n	80022ca <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	3302      	adds	r3, #2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	8bfb      	ldrh	r3, [r7, #30]
 8002276:	429a      	cmp	r2, r3
 8002278:	d906      	bls.n	8002288 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	8bfb      	ldrh	r3, [r7, #30]
 8002280:	1ad2      	subs	r2, r2, r3
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e002      	b.n	800228e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f005 fe40 	bl	8007f22 <HAL_PCD_DataInStageCallback>
 80022a2:	e018      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	8bfb      	ldrh	r3, [r7, #30]
 80022aa:	441a      	add	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	8bfb      	ldrh	r3, [r7, #30]
 80022b6:	441a      	add	r2, r3
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fdd4 	bl	8004e70 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022c8:	e005      	b.n	80022d6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f91b 	bl	800250c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f6ff ad17 	blt.w	8001d16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b088      	sub	sp, #32
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07e      	beq.n	8002408 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	3302      	adds	r3, #2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002332:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	8b7b      	ldrh	r3, [r7, #26]
 800233a:	429a      	cmp	r2, r3
 800233c:	d306      	bcc.n	800234c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	8b7b      	ldrh	r3, [r7, #26]
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	619a      	str	r2, [r3, #24]
 800234a:	e002      	b.n	8002352 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d123      	bne.n	80023a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002374:	833b      	strh	r3, [r7, #24]
 8002376:	8b3b      	ldrh	r3, [r7, #24]
 8002378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800237c:	833b      	strh	r3, [r7, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	8b3b      	ldrh	r3, [r7, #24]
 800238e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01f      	beq.n	80023ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	82fb      	strh	r3, [r7, #22]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023ec:	8b7b      	ldrh	r3, [r7, #26]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6959      	ldr	r1, [r3, #20]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	891a      	ldrh	r2, [r3, #8]
 8002400:	8b7b      	ldrh	r3, [r7, #26]
 8002402:	f003 ffd7 	bl	80063b4 <USB_ReadPMA>
 8002406:	e07c      	b.n	8002502 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002410:	b29b      	uxth	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	3306      	adds	r3, #6
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	8b7b      	ldrh	r3, [r7, #26]
 8002438:	429a      	cmp	r2, r3
 800243a:	d306      	bcc.n	800244a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	8b7b      	ldrh	r3, [r7, #26]
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	619a      	str	r2, [r3, #24]
 8002448:	e002      	b.n	8002450 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d123      	bne.n	80024a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	83fb      	strh	r3, [r7, #30]
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800247a:	83fb      	strh	r3, [r7, #30]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	8bfb      	ldrh	r3, [r7, #30]
 800248c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	b29b      	uxth	r3, r3
 800249e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11f      	bne.n	80024ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c4:	83bb      	strh	r3, [r7, #28]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	441a      	add	r2, r3
 80024d4:	8bbb      	ldrh	r3, [r7, #28]
 80024d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024ea:	8b7b      	ldrh	r3, [r7, #26]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	895a      	ldrh	r2, [r3, #10]
 80024fc:	8b7b      	ldrh	r3, [r7, #26]
 80024fe:	f003 ff59 	bl	80063b4 <USB_ReadPMA>
    }
  }

  return count;
 8002502:	8b7b      	ldrh	r3, [r7, #26]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b092      	sub	sp, #72	; 0x48
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8132 	beq.w	800278a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3302      	adds	r3, #2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002556:	429a      	cmp	r2, r3
 8002558:	d906      	bls.n	8002568 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	e002      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12c      	bne.n	80025d0 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f005 fcd0 	bl	8007f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 822f 	beq.w	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	827b      	strh	r3, [r7, #18]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	441a      	add	r2, r3
 80025b8:	8a7b      	ldrh	r3, [r7, #18]
 80025ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	8013      	strh	r3, [r2, #0]
 80025ce:	e20d      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01f      	beq.n	800261a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	441a      	add	r2, r3
 8002604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800260e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002616:	b29b      	uxth	r3, r3
 8002618:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 81e3 	bne.w	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800262c:	441a      	add	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002638:	441a      	add	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d309      	bcc.n	800265e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	1ad2      	subs	r2, r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	621a      	str	r2, [r3, #32]
 800265c:	e014      	b.n	8002688 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002672:	e009      	b.n	8002688 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d155      	bne.n	800273c <HAL_PCD_EP_DB_Transmit+0x230>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	011a      	lsls	r2, r3, #4
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d112      	bne.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	e047      	b.n	8002774 <HAL_PCD_EP_DB_Transmit+0x268>
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2b3e      	cmp	r3, #62	; 0x3e
 80026e8:	d811      	bhi.n	800270e <HAL_PCD_EP_DB_Transmit+0x202>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	3301      	adds	r3, #1
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	b29b      	uxth	r3, r3
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	b29a      	uxth	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	e032      	b.n	8002774 <HAL_PCD_EP_DB_Transmit+0x268>
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_PCD_EP_DB_Transmit+0x218>
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	b29b      	uxth	r3, r3
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e01b      	b.n	8002774 <HAL_PCD_EP_DB_Transmit+0x268>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d117      	bne.n	8002774 <HAL_PCD_EP_DB_Transmit+0x268>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	4413      	add	r3, r2
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	011a      	lsls	r2, r3, #4
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	4413      	add	r3, r2
 8002766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	b29a      	uxth	r2, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6959      	ldr	r1, [r3, #20]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	891a      	ldrh	r2, [r3, #8]
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	b29b      	uxth	r3, r3
 8002784:	f003 fdd2 	bl	800632c <USB_WritePMA>
 8002788:	e130      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	3306      	adds	r3, #6
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d306      	bcc.n	80027cc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027c4:	1ad2      	subs	r2, r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	e002      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12c      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f005 fb9e 	bl	8007f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 80fd 	bne.w	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]
 8002832:	e0db      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d11f      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 80b1 	bne.w	80029ec <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002890:	441a      	add	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800289c:	441a      	add	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d309      	bcc.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e014      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80028ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028d6:	e009      	b.n	80028ec <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d155      	bne.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x49a>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290e:	4413      	add	r3, r2
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	011a      	lsls	r2, r3, #4
 8002918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291a:	4413      	add	r3, r2
 800291c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d112      	bne.n	800294e <HAL_PCD_EP_DB_Transmit+0x442>
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002932:	b29a      	uxth	r2, r3
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002946:	b29a      	uxth	r2, r3
 8002948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	e044      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	2b3e      	cmp	r3, #62	; 0x3e
 8002952:	d811      	bhi.n	8002978 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	3301      	adds	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	b29b      	uxth	r3, r3
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	b29a      	uxth	r2, r3
 8002972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e02f      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x482>
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	3b01      	subs	r3, #1
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	b29b      	uxth	r3, r3
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e018      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d114      	bne.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	4413      	add	r3, r2
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	011a      	lsls	r2, r3, #4
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	4413      	add	r3, r2
 80029ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	6959      	ldr	r1, [r3, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	895a      	ldrh	r2, [r3, #10]
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f003 fca0 	bl	800632c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a06:	823b      	strh	r3, [r7, #16]
 8002a08:	8a3b      	ldrh	r3, [r7, #16]
 8002a0a:	f083 0310 	eor.w	r3, r3, #16
 8002a0e:	823b      	strh	r3, [r7, #16]
 8002a10:	8a3b      	ldrh	r3, [r7, #16]
 8002a12:	f083 0320 	eor.w	r3, r3, #32
 8002a16:	823b      	strh	r3, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	8a3b      	ldrh	r3, [r7, #16]
 8002a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3748      	adds	r7, #72	; 0x48
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	817b      	strh	r3, [r7, #10]
 8002a54:	4613      	mov	r3, r2
 8002a56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e009      	b.n	8002a90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a7c:	897a      	ldrh	r2, [r7, #10]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	80da      	strh	r2, [r3, #6]
 8002aa4:	e00b      	b.n	8002abe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e26c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8087 	beq.w	8002bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aec:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d00c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af8:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d06c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d168      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e246      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x76>
 8002b34:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7f      	ldr	r2, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e02e      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7a      	ldr	r2, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0xbc>
 8002b6e:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a71      	ldr	r2, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f81a 	bl	8000be0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe f816 	bl	8000be0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1fa      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe4>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f806 	bl	8000be0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fe f802 	bl	8000be0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1e6      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x10c>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
 8002c1e:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1ba      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e03a      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fd ffbb 	bl	8000be0 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fd ffb7 	bl	8000be0 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e19b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4927      	ldr	r1, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fd ff9a 	bl	8000be0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7fd ff96 	bl	8000be0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e17a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03a      	beq.n	8002d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fd ff7a 	bl	8000be0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fd ff76 	bl	8000be0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e15a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f000 fac6 	bl	80032a0 <RCC_Delay>
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fd ff60 	bl	8000be0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	e00f      	b.n	8002d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fd ff5c 	bl	8000be0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d908      	bls.n	8002d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e140      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	42420000 	.word	0x42420000
 8002d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b9e      	ldr	r3, [pc, #632]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e9      	bne.n	8002d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a6 	beq.w	8002eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b97      	ldr	r3, [pc, #604]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b94      	ldr	r3, [pc, #592]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a93      	ldr	r2, [pc, #588]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]
 8002d7a:	4b91      	ldr	r3, [pc, #580]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b8e      	ldr	r3, [pc, #568]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b8b      	ldr	r3, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a8a      	ldr	r2, [pc, #552]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fd ff1d 	bl	8000be0 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7fd ff19 	bl	8000be0 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b64      	cmp	r3, #100	; 0x64
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0fd      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b81      	ldr	r3, [pc, #516]	; (8002fc4 <HAL_RCC_OscConfig+0x4f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x312>
 8002dd0:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e02d      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x334>
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	4b73      	ldr	r3, [pc, #460]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a72      	ldr	r2, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x356>
 8002e08:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a6c      	ldr	r2, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	4b6a      	ldr	r3, [pc, #424]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a69      	ldr	r2, [pc, #420]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a66      	ldr	r2, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
 8002e2e:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a63      	ldr	r2, [pc, #396]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fd fecd 	bl	8000be0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd fec9 	bl	8000be0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0ab      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ee      	beq.n	8002e4a <HAL_RCC_OscConfig+0x37e>
 8002e6c:	e014      	b.n	8002e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fd feb7 	bl	8000be0 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fd feb3 	bl	8000be0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e095      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ee      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8081 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d061      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d146      	bne.n	8002f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x4fc>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fd fe87 	bl	8000be0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fd fe83 	bl	8000be0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e067      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	492d      	ldr	r1, [pc, #180]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a19      	ldr	r1, [r3, #32]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	4927      	ldr	r1, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x4fc>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fd fe57 	bl	8000be0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fd fe53 	bl	8000be0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e037      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46a>
 8002f54:	e02f      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_OscConfig+0x4fc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fd fe40 	bl	8000be0 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fd fe3c 	bl	8000be0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e020      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x498>
 8002f82:	e018      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	42420060 	.word	0x42420060

08002fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d0      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4965      	ldr	r1, [pc, #404]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d040      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e073      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e06b      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4936      	ldr	r1, [pc, #216]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7fd fd90 	bl	8000be0 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fd fd8c 	bl	8000be0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e053      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d210      	bcs.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4922      	ldr	r1, [pc, #136]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4601      	mov	r1, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	fa21 f303 	lsr.w	r3, r1, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1cc>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1d0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fcee 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	08009350 	.word	0x08009350
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b490      	push	{r4, r7}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031a8:	1d3c      	adds	r4, r7, #4
 80031aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d002      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x40>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x46>
 80031de:	e02d      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e2:	623b      	str	r3, [r7, #32]
      break;
 80031e4:	e02d      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	0c9b      	lsrs	r3, r3, #18
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f2:	4413      	add	r3, r2
 80031f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c5b      	lsrs	r3, r3, #17
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003212:	4413      	add	r3, r2
 8003214:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003218:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	4a0f      	ldr	r2, [pc, #60]	; (800325c <HAL_RCC_GetSysClockFreq+0xbc>)
 800321e:	fb02 f203 	mul.w	r2, r2, r3
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	e004      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	623b      	str	r3, [r7, #32]
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCC_GetSysClockFreq+0xbc>)
 800323e:	623b      	str	r3, [r7, #32]
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6a3b      	ldr	r3, [r7, #32]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3728      	adds	r7, #40	; 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc90      	pop	{r4, r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	080092bc 	.word	0x080092bc
 8003254:	080092cc 	.word	0x080092cc
 8003258:	40021000 	.word	0x40021000
 800325c:	007a1200 	.word	0x007a1200
 8003260:	003d0900 	.word	0x003d0900

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b02      	ldr	r3, [pc, #8]	; (8003274 <HAL_RCC_GetHCLKFreq+0x10>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff2 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003280:	4601      	mov	r1, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	08009360 	.word	0x08009360

080032a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <RCC_Delay+0x34>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <RCC_Delay+0x38>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0a5b      	lsrs	r3, r3, #9
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032bc:	bf00      	nop
  }
  while (Delay --);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	60fa      	str	r2, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f9      	bne.n	80032bc <RCC_Delay+0x1c>
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000
 80032d8:	10624dd3 	.word	0x10624dd3

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d07d      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fc:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b4c      	ldr	r3, [pc, #304]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a4b      	ldr	r2, [pc, #300]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	61d3      	str	r3, [r2, #28]
 8003314:	4b49      	ldr	r3, [pc, #292]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d118      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a42      	ldr	r2, [pc, #264]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333c:	f7fd fc50 	bl	8000be0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	e008      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fc4c 	bl	8000be0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e06d      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d02e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d027      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003380:	4b2e      	ldr	r3, [pc, #184]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003388:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003390:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d014      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fd fc1b 	bl	8000be0 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd fc17 	bl	8000be0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e036      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ee      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4917      	ldr	r1, [pc, #92]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	490b      	ldr	r1, [pc, #44]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4904      	ldr	r1, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
 8003444:	42420440 	.word	0x42420440

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fab8 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fc1c 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03a      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0x98>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d009      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_Base_Start_IT+0x9c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_TIM_Base_Start_IT+0xa0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d010      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	e007      	b.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fb7a 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x24>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x3e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x58>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x6a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e05e      	b.n	800376c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x82>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e013      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e00b      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd68 	bl	80041c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d107      	bne.n	800370e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start+0x138>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003720:	d009      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_TIM_PWM_Start+0x13c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PWM_Start+0xfa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_PWM_Start+0x140>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa62 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa55 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa64 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0204 	mvn.w	r2, #4
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa38 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa2b 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa3a 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa0e 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa01 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa10 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9e4 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9d7 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9e6 	bl	8003c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fc fda8 	bl	8000454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fcd5 	bl	80042da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9aa 	bl	8003cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0220 	mvn.w	r2, #32
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fca0 	bl	80042c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ac      	b.n	8003b04 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003af9 	.word	0x08003af9
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003af9 	.word	0x08003af9
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003af9 	.word	0x08003af9
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003af9 	.word	0x08003af9
 80039e0:	08003a77 	.word	0x08003a77
 80039e4:	08003af9 	.word	0x08003af9
 80039e8:	08003af9 	.word	0x08003af9
 80039ec:	08003af9 	.word	0x08003af9
 80039f0:	08003ab7 	.word	0x08003ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f9c4 	bl	8003d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      break;
 8003a32:	e062      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa0a 	bl	8003e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
      break;
 8003a74:	e041      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fa53 	bl	8003f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e021      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa9d 	bl	8003ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_ConfigClockSource+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0a6      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x166>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d067      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x120>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d80b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x6c>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d073      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d802      	bhi.n	8003b6e <HAL_TIM_ConfigClockSource+0x62>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06f      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b6c:	e078      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d06c      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d06a      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b76:	e073      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b78:	2b70      	cmp	r3, #112	; 0x70
 8003b7a:	d00d      	beq.n	8003b98 <HAL_TIM_ConfigClockSource+0x8c>
 8003b7c:	2b70      	cmp	r3, #112	; 0x70
 8003b7e:	d804      	bhi.n	8003b8a <HAL_TIM_ConfigClockSource+0x7e>
 8003b80:	2b50      	cmp	r3, #80	; 0x50
 8003b82:	d033      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0xe0>
 8003b84:	2b60      	cmp	r3, #96	; 0x60
 8003b86:	d041      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b88:	e06a      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8e:	d066      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x152>
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d017      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b96:	e063      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f000 faed 	bl	8004186 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e04c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f000 fad6 	bl	8004186 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be8:	609a      	str	r2, [r3, #8]
      break;
 8003bea:	e039      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fa4d 	bl	8004098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2150      	movs	r1, #80	; 0x50
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 faa4 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e029      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 fa6b 	bl	80040f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2160      	movs	r1, #96	; 0x60
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa94 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e019      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 fa2d 	bl	8004098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa84 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e009      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fa7b 	bl	8004152 <TIM_ITRx_SetConfig>
        break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x30>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <TIM_Base_SetConfig+0xbc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_Base_SetConfig+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <TIM_Base_SetConfig+0xb8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	615a      	str	r2, [r3, #20]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800

08003d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0201 	bic.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 0302 	bic.w	r3, r3, #2
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_OC1_SetConfig+0xc8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10c      	bne.n	8003dfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0308 	bic.w	r3, r3, #8
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <TIM_OC1_SetConfig+0xc8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d111      	bne.n	8003e2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	621a      	str	r2, [r3, #32]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00

08003e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0320 	bic.w	r3, r3, #32
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <TIM_OC2_SetConfig+0xd0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <TIM_OC2_SetConfig+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d113      	bne.n	8003f00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <TIM_OC3_SetConfig+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10d      	bne.n	8003fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <TIM_OC3_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d113      	bne.n	8003fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <TIM_OC4_SetConfig+0x98>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d109      	bne.n	8004070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00

08004098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 030a 	bic.w	r3, r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f023 0210 	bic.w	r2, r3, #16
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	031b      	lsls	r3, r3, #12
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	f043 0307 	orr.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	021a      	lsls	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2201      	movs	r2, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004220:	2302      	movs	r3, #2
 8004222:	e046      	b.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d009      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10c      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4313      	orrs	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800

080042c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ec:	b084      	sub	sp, #16
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	f107 0014 	add.w	r0, r7, #20
 80042fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	b004      	add	sp, #16
 800430a:	4770      	bx	lr

0800430c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800431c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004320:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	b29a      	uxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004340:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004344:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	b29b      	uxth	r3, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	b29b      	uxth	r3, r3
 8004356:	4013      	ands	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004384:	b084      	sub	sp, #16
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	f107 0014 	add.w	r0, r7, #20
 8004392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr

080043c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b09b      	sub	sp, #108	; 0x6c
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	78db      	ldrb	r3, [r3, #3]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d81f      	bhi.n	8004436 <USB_ActivateEndpoint+0x72>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <USB_ActivateEndpoint+0x38>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	08004429 	.word	0x08004429
 8004404:	0800443f 	.word	0x0800443f
 8004408:	0800441b 	.word	0x0800441b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800440c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004414:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004418:	e012      	b.n	8004440 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800441a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800441e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004422:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004426:	e00b      	b.n	8004440 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004428:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800442c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004430:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004434:	e004      	b.n	8004440 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800443c:	e000      	b.n	8004440 <USB_ActivateEndpoint+0x7c>
      break;
 800443e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	b29a      	uxth	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	7b1b      	ldrb	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 8149 	bne.w	8004744 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8084 	beq.w	80045c4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4413      	add	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	88db      	ldrh	r3, [r3, #6]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	81fb      	strh	r3, [r7, #14]
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <USB_ActivateEndpoint+0x17c>
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	81bb      	strh	r3, [r7, #12]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	89bb      	ldrh	r3, [r7, #12]
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	78db      	ldrb	r3, [r3, #3]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d020      	beq.n	800458a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455e:	813b      	strh	r3, [r7, #8]
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	f083 0320 	eor.w	r3, r3, #32
 8004566:	813b      	strh	r3, [r7, #8]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	893b      	ldrh	r3, [r7, #8]
 8004574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	b29b      	uxth	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]
 8004588:	e27f      	b.n	8004a8a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]
 80045c2:	e262      	b.n	8004a8a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	4413      	add	r3, r2
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	88db      	ldrh	r3, [r3, #6]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	4413      	add	r3, r2
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	4413      	add	r3, r2
 8004616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d112      	bne.n	800464a <USB_ActivateEndpoint+0x286>
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800462e:	b29a      	uxth	r2, r3
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004642:	b29a      	uxth	r2, r3
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e02f      	b.n	80046aa <USB_ActivateEndpoint+0x2e6>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b3e      	cmp	r3, #62	; 0x3e
 8004650:	d813      	bhi.n	800467a <USB_ActivateEndpoint+0x2b6>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	663b      	str	r3, [r7, #96]	; 0x60
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <USB_ActivateEndpoint+0x2a8>
 8004666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004668:	3301      	adds	r3, #1
 800466a:	663b      	str	r3, [r7, #96]	; 0x60
 800466c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466e:	b29b      	uxth	r3, r3
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	b29a      	uxth	r2, r3
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	e017      	b.n	80046aa <USB_ActivateEndpoint+0x2e6>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <USB_ActivateEndpoint+0x2d0>
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004690:	3b01      	subs	r3, #1
 8004692:	663b      	str	r3, [r7, #96]	; 0x60
 8004694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004696:	b29b      	uxth	r3, r3
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	83fb      	strh	r3, [r7, #30]
 80046b8:	8bfb      	ldrh	r3, [r7, #30]
 80046ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01b      	beq.n	80046fa <USB_ActivateEndpoint+0x336>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	83bb      	strh	r3, [r7, #28]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	8bbb      	ldrh	r3, [r7, #28]
 80046e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004710:	837b      	strh	r3, [r7, #26]
 8004712:	8b7b      	ldrh	r3, [r7, #26]
 8004714:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004718:	837b      	strh	r3, [r7, #26]
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004720:	837b      	strh	r3, [r7, #26]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8b7b      	ldrh	r3, [r7, #26]
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]
 8004742:	e1a2      	b.n	8004a8a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65bb      	str	r3, [r7, #88]	; 0x58
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004790:	4413      	add	r3, r2
 8004792:	65bb      	str	r3, [r7, #88]	; 0x58
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479c:	4413      	add	r3, r2
 800479e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a2:	657b      	str	r3, [r7, #84]	; 0x54
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	891b      	ldrh	r3, [r3, #8]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	653b      	str	r3, [r7, #80]	; 0x50
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c4:	4413      	add	r3, r2
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	011a      	lsls	r2, r3, #4
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	895b      	ldrh	r3, [r3, #10]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 8091 	bne.w	8004914 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004800:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01b      	beq.n	8004842 <USB_ActivateEndpoint+0x47e>
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004850:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01b      	beq.n	8004892 <USB_ActivateEndpoint+0x4ce>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	867b      	strh	r3, [r7, #50]	; 0x32
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	441a      	add	r2, r3
 80048fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	b29b      	uxth	r3, r3
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e0ba      	b.n	8004a8a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01d      	beq.n	800496c <USB_ActivateEndpoint+0x5a8>
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800497c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01d      	beq.n	80049c4 <USB_ActivateEndpoint+0x600>
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	78db      	ldrb	r3, [r3, #3]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d024      	beq.n	8004a16 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049ea:	f083 0320 	eor.w	r3, r3, #32
 80049ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8013      	strh	r3, [r2, #0]
 8004a14:	e01d      	b.n	8004a52 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	376c      	adds	r7, #108	; 0x6c
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b08d      	sub	sp, #52	; 0x34
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7b1b      	ldrb	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 808e 	bne.w	8004bc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d044      	beq.n	8004b3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	81bb      	strh	r3, [r7, #12]
 8004ac2:	89bb      	ldrh	r3, [r7, #12]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <USB_DeactivateEndpoint+0x6c>
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	817b      	strh	r3, [r7, #10]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1a:	813b      	strh	r3, [r7, #8]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	893b      	ldrh	r3, [r7, #8]
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
 8004b3c:	e192      	b.n	8004e64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	827b      	strh	r3, [r7, #18]
 8004b4c:	8a7b      	ldrh	r3, [r7, #18]
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <USB_DeactivateEndpoint+0xf6>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	823b      	strh	r3, [r7, #16]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8a3b      	ldrh	r3, [r7, #16]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	81fb      	strh	r3, [r7, #14]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e14d      	b.n	8004e64 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 80a5 	bne.w	8004d1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	843b      	strh	r3, [r7, #32]
 8004be0:	8c3b      	ldrh	r3, [r7, #32]
 8004be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01b      	beq.n	8004c22 <USB_DeactivateEndpoint+0x18a>
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	83fb      	strh	r3, [r7, #30]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8bfb      	ldrh	r3, [r7, #30]
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	83bb      	strh	r3, [r7, #28]
 8004c30:	8bbb      	ldrh	r3, [r7, #28]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <USB_DeactivateEndpoint+0x1da>
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	837b      	strh	r3, [r7, #26]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	8b7b      	ldrh	r3, [r7, #26]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	833b      	strh	r3, [r7, #24]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	8b3b      	ldrh	r3, [r7, #24]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	82fb      	strh	r3, [r7, #22]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8afb      	ldrh	r3, [r7, #22]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf8:	82bb      	strh	r3, [r7, #20]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	8abb      	ldrh	r3, [r7, #20]
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]
 8004d1a:	e0a3      	b.n	8004e64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <USB_DeactivateEndpoint+0x2d4>
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <USB_DeactivateEndpoint+0x324>
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3734      	adds	r7, #52	; 0x34
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b0c4      	sub	sp, #272	; 0x110
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	6018      	str	r0, [r3, #0]
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	f040 8557 	bne.w	8005938 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d905      	bls.n	8004ea6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ea4:	e004      	b.n	8004eb0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	7b1b      	ldrb	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12c      	bne.n	8004f14 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6959      	ldr	r1, [r3, #20]
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	88da      	ldrh	r2, [r3, #6]
 8004ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	1d38      	adds	r0, r7, #4
 8004ece:	6800      	ldr	r0, [r0, #0]
 8004ed0:	f001 fa2c 	bl	800632c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	011a      	lsls	r2, r3, #4
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	f000 bcdd 	b.w	80058ce <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f14:	463b      	mov	r3, r7
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	f040 8347 	bne.w	80055ae <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f20:	463b      	mov	r3, r7
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	463b      	mov	r3, r7
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	f240 82eb 	bls.w	8005508 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f80:	1ad2      	subs	r2, r2, r3
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8159 	beq.w	8005256 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d164      	bne.n	800507e <USB_EPStartXfer+0x20e>
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	4413      	add	r3, r2
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	011a      	lsls	r2, r3, #4
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d112      	bne.n	800500c <USB_EPStartXfer+0x19c>
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005004:	b29a      	uxth	r2, r3
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e054      	b.n	80050b6 <USB_EPStartXfer+0x246>
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005010:	2b3e      	cmp	r3, #62	; 0x3e
 8005012:	d817      	bhi.n	8005044 <USB_EPStartXfer+0x1d4>
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800501e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <USB_EPStartXfer+0x1c4>
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	3301      	adds	r3, #1
 8005030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	b29b      	uxth	r3, r3
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	b29a      	uxth	r2, r3
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e038      	b.n	80050b6 <USB_EPStartXfer+0x246>
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800504e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <USB_EPStartXfer+0x1f4>
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505e:	3b01      	subs	r3, #1
 8005060:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e01b      	b.n	80050b6 <USB_EPStartXfer+0x246>
 800507e:	463b      	mov	r3, r7
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d116      	bne.n	80050b6 <USB_EPStartXfer+0x246>
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	4413      	add	r3, r2
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
 80050ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	895b      	ldrh	r3, [r3, #10]
 80050bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050d0:	1d38      	adds	r0, r7, #4
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	f001 f92a 	bl	800632c <USB_WritePMA>
            ep->xfer_buff += len;
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	441a      	add	r2, r3
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d909      	bls.n	800510e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	621a      	str	r2, [r3, #32]
 800510c:	e008      	b.n	8005120 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800510e:	463b      	mov	r3, r7
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005118:	463b      	mov	r3, r7
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d164      	bne.n	80051f4 <USB_EPStartXfer+0x384>
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005138:	b29b      	uxth	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	463b      	mov	r3, r7
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	011a      	lsls	r2, r3, #4
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d112      	bne.n	8005182 <USB_EPStartXfer+0x312>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005166:	b29a      	uxth	r2, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517a:	b29a      	uxth	r2, r3
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	801a      	strh	r2, [r3, #0]
 8005180:	e057      	b.n	8005232 <USB_EPStartXfer+0x3c2>
 8005182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005186:	2b3e      	cmp	r3, #62	; 0x3e
 8005188:	d817      	bhi.n	80051ba <USB_EPStartXfer+0x34a>
 800518a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <USB_EPStartXfer+0x33a>
 80051a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051a4:	3301      	adds	r3, #1
 80051a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	029b      	lsls	r3, r3, #10
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e03b      	b.n	8005232 <USB_EPStartXfer+0x3c2>
 80051ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <USB_EPStartXfer+0x36a>
 80051d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051d4:	3b01      	subs	r3, #1
 80051d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051de:	b29b      	uxth	r3, r3
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e01e      	b.n	8005232 <USB_EPStartXfer+0x3c2>
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d119      	bne.n	8005232 <USB_EPStartXfer+0x3c2>
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	4413      	add	r3, r2
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	4413      	add	r3, r2
 8005222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522c:	b29a      	uxth	r2, r3
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	891b      	ldrh	r3, [r3, #8]
 8005238:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800523c:	463b      	mov	r3, r7
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6959      	ldr	r1, [r3, #20]
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	b29b      	uxth	r3, r3
 8005248:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800524c:	1d38      	adds	r0, r7, #4
 800524e:	6800      	ldr	r0, [r0, #0]
 8005250:	f001 f86c 	bl	800632c <USB_WritePMA>
 8005254:	e33b      	b.n	80058ce <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d164      	bne.n	800532a <USB_EPStartXfer+0x4ba>
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526e:	b29b      	uxth	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	4413      	add	r3, r2
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	011a      	lsls	r2, r3, #4
 8005280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005282:	4413      	add	r3, r2
 8005284:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d112      	bne.n	80052b8 <USB_EPStartXfer+0x448>
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800529c:	b29a      	uxth	r2, r3
 800529e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	e057      	b.n	8005368 <USB_EPStartXfer+0x4f8>
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	2b3e      	cmp	r3, #62	; 0x3e
 80052be:	d817      	bhi.n	80052f0 <USB_EPStartXfer+0x480>
 80052c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <USB_EPStartXfer+0x470>
 80052d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052da:	3301      	adds	r3, #1
 80052dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e03b      	b.n	8005368 <USB_EPStartXfer+0x4f8>
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <USB_EPStartXfer+0x4a0>
 8005306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800530a:	3b01      	subs	r3, #1
 800530c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005314:	b29b      	uxth	r3, r3
 8005316:	029b      	lsls	r3, r3, #10
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e01e      	b.n	8005368 <USB_EPStartXfer+0x4f8>
 800532a:	463b      	mov	r3, r7
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d119      	bne.n	8005368 <USB_EPStartXfer+0x4f8>
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	657b      	str	r3, [r7, #84]	; 0x54
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005348:	4413      	add	r3, r2
 800534a:	657b      	str	r3, [r7, #84]	; 0x54
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	011a      	lsls	r2, r3, #4
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	4413      	add	r3, r2
 8005358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005362:	b29a      	uxth	r2, r3
 8005364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005368:	463b      	mov	r3, r7
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	891b      	ldrh	r3, [r3, #8]
 800536e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6959      	ldr	r1, [r3, #20]
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	b29b      	uxth	r3, r3
 800537e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005382:	1d38      	adds	r0, r7, #4
 8005384:	6800      	ldr	r0, [r0, #0]
 8005386:	f000 ffd1 	bl	800632c <USB_WritePMA>
            ep->xfer_buff += len;
 800538a:	463b      	mov	r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005394:	441a      	add	r2, r3
 8005396:	463b      	mov	r3, r7
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d909      	bls.n	80053c0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80053ac:	463b      	mov	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b6:	1ad2      	subs	r2, r2, r3
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	621a      	str	r2, [r3, #32]
 80053be:	e008      	b.n	80053d2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d164      	bne.n	80054ac <USB_EPStartXfer+0x63c>
 80053e2:	1d3b      	adds	r3, r7, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f6:	4413      	add	r3, r2
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fa:	463b      	mov	r3, r7
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	011a      	lsls	r2, r3, #4
 8005402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005404:	4413      	add	r3, r2
 8005406:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38
 800540c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d112      	bne.n	800543a <USB_EPStartXfer+0x5ca>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541e:	b29a      	uxth	r2, r3
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e054      	b.n	80054e4 <USB_EPStartXfer+0x674>
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	2b3e      	cmp	r3, #62	; 0x3e
 8005440:	d817      	bhi.n	8005472 <USB_EPStartXfer+0x602>
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800544c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <USB_EPStartXfer+0x5f2>
 8005458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800545c:	3301      	adds	r3, #1
 800545e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005466:	b29b      	uxth	r3, r3
 8005468:	029b      	lsls	r3, r3, #10
 800546a:	b29a      	uxth	r2, r3
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	e038      	b.n	80054e4 <USB_EPStartXfer+0x674>
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800547c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <USB_EPStartXfer+0x622>
 8005488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800548c:	3b01      	subs	r3, #1
 800548e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005496:	b29b      	uxth	r3, r3
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e01b      	b.n	80054e4 <USB_EPStartXfer+0x674>
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d116      	bne.n	80054e4 <USB_EPStartXfer+0x674>
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	4413      	add	r3, r2
 80054c6:	647b      	str	r3, [r7, #68]	; 0x44
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	011a      	lsls	r2, r3, #4
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	895b      	ldrh	r3, [r3, #10]
 80054ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6959      	ldr	r1, [r3, #20]
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054fe:	1d38      	adds	r0, r7, #4
 8005500:	6800      	ldr	r0, [r0, #0]
 8005502:	f000 ff13 	bl	800632c <USB_WritePMA>
 8005506:	e1e2      	b.n	80058ce <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556a:	4413      	add	r3, r2
 800556c:	663b      	str	r3, [r7, #96]	; 0x60
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005578:	4413      	add	r3, r2
 800557a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	b29a      	uxth	r2, r3
 8005586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	891b      	ldrh	r3, [r3, #8]
 8005590:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055a4:	1d38      	adds	r0, r7, #4
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	f000 fec0 	bl	800632c <USB_WritePMA>
 80055ac:	e18f      	b.n	80058ce <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 808f 	beq.w	80056e8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d164      	bne.n	80056a4 <USB_EPStartXfer+0x834>
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	673b      	str	r3, [r7, #112]	; 0x70
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ee:	4413      	add	r3, r2
 80055f0:	673b      	str	r3, [r7, #112]	; 0x70
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fc:	4413      	add	r3, r2
 80055fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d112      	bne.n	8005632 <USB_EPStartXfer+0x7c2>
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005616:	b29a      	uxth	r2, r3
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29a      	uxth	r2, r3
 800562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e054      	b.n	80056dc <USB_EPStartXfer+0x86c>
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005636:	2b3e      	cmp	r3, #62	; 0x3e
 8005638:	d817      	bhi.n	800566a <USB_EPStartXfer+0x7fa>
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <USB_EPStartXfer+0x7ea>
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	3301      	adds	r3, #1
 8005656:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	b29b      	uxth	r3, r3
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	b29a      	uxth	r2, r3
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	e038      	b.n	80056dc <USB_EPStartXfer+0x86c>
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2b00      	cmp	r3, #0
 800567e:	d104      	bne.n	800568a <USB_EPStartXfer+0x81a>
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	3b01      	subs	r3, #1
 8005686:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	b29b      	uxth	r3, r3
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	b29b      	uxth	r3, r3
 8005694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569c:	b29a      	uxth	r2, r3
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e01b      	b.n	80056dc <USB_EPStartXfer+0x86c>
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d116      	bne.n	80056dc <USB_EPStartXfer+0x86c>
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056bc:	4413      	add	r3, r2
 80056be:	67bb      	str	r3, [r7, #120]	; 0x78
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	011a      	lsls	r2, r3, #4
 80056c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d0:	677b      	str	r3, [r7, #116]	; 0x74
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	895b      	ldrh	r3, [r3, #10]
 80056e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80056e6:	e097      	b.n	8005818 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d168      	bne.n	80057c4 <USB_EPStartXfer+0x954>
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800570a:	4413      	add	r3, r2
 800570c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005710:	463b      	mov	r3, r7
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d112      	bne.n	8005752 <USB_EPStartXfer+0x8e2>
 800572c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005736:	b29a      	uxth	r2, r3
 8005738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574a:	b29a      	uxth	r2, r3
 800574c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e05d      	b.n	800580e <USB_EPStartXfer+0x99e>
 8005752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005756:	2b3e      	cmp	r3, #62	; 0x3e
 8005758:	d817      	bhi.n	800578a <USB_EPStartXfer+0x91a>
 800575a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <USB_EPStartXfer+0x90a>
 8005770:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005774:	3301      	adds	r3, #1
 8005776:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800577a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29a      	uxth	r2, r3
 8005784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e041      	b.n	800580e <USB_EPStartXfer+0x99e>
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <USB_EPStartXfer+0x93a>
 80057a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057a4:	3b01      	subs	r3, #1
 80057a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e024      	b.n	800580e <USB_EPStartXfer+0x99e>
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d11f      	bne.n	800580e <USB_EPStartXfer+0x99e>
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e6:	4413      	add	r3, r2
 80057e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	011a      	lsls	r2, r3, #4
 80057f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005806:	b29a      	uxth	r2, r3
 8005808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800580c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	891b      	ldrh	r3, [r3, #8]
 8005814:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005818:	463b      	mov	r3, r7
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6959      	ldr	r1, [r3, #20]
 800581e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005822:	b29b      	uxth	r3, r3
 8005824:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005828:	1d38      	adds	r0, r7, #4
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	f000 fd7e 	bl	800632c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d122      	bne.n	8005880 <USB_EPStartXfer+0xa10>
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005854:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
 800587e:	e026      	b.n	80058ce <USB_EPStartXfer+0xa5e>
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d121      	bne.n	80058ce <USB_EPStartXfer+0xa5e>
 800588a:	1d3b      	adds	r3, r7, #4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80058a8:	1d3b      	adds	r3, r7, #4
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	463b      	mov	r3, r7
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f107 020e 	add.w	r2, r7, #14
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ec:	8013      	strh	r3, [r2, #0]
 80058ee:	f107 030e 	add.w	r3, r7, #14
 80058f2:	f107 020e 	add.w	r2, r7, #14
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	f082 0210 	eor.w	r2, r2, #16
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	f107 030e 	add.w	r3, r7, #14
 8005902:	f107 020e 	add.w	r2, r7, #14
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	f082 0220 	eor.w	r2, r2, #32
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	f107 030e 	add.w	r3, r7, #14
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]
 8005936:	e3b5      	b.n	80060a4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	7b1b      	ldrb	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 8090 	bne.w	8005a64 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d90e      	bls.n	8005972 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	619a      	str	r2, [r3, #24]
 8005970:	e008      	b.n	8005984 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800599c:	4413      	add	r3, r2
 800599e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	011a      	lsls	r2, r3, #4
 80059aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d116      	bne.n	80059ee <USB_EPStartXfer+0xb7e>
 80059c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e32c      	b.n	8006048 <USB_EPStartXfer+0x11d8>
 80059ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f2:	2b3e      	cmp	r3, #62	; 0x3e
 80059f4:	d818      	bhi.n	8005a28 <USB_EPStartXfer+0xbb8>
 80059f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <USB_EPStartXfer+0xba6>
 8005a0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a10:	3301      	adds	r3, #1
 8005a12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e30f      	b.n	8006048 <USB_EPStartXfer+0x11d8>
 8005a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <USB_EPStartXfer+0xbd8>
 8005a3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	029b      	lsls	r3, r3, #10
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e2f1      	b.n	8006048 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	f040 818f 	bne.w	8005d8e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d175      	bne.n	8005b66 <USB_EPStartXfer+0xcf6>
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a92:	4413      	add	r3, r2
 8005a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d116      	bne.n	8005ae6 <USB_EPStartXfer+0xc76>
 8005ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e065      	b.n	8005bb2 <USB_EPStartXfer+0xd42>
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b3e      	cmp	r3, #62	; 0x3e
 8005aee:	d81a      	bhi.n	8005b26 <USB_EPStartXfer+0xcb6>
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <USB_EPStartXfer+0xca4>
 8005b0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e045      	b.n	8005bb2 <USB_EPStartXfer+0xd42>
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <USB_EPStartXfer+0xcda>
 8005b40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b44:	3b01      	subs	r3, #1
 8005b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	e025      	b.n	8005bb2 <USB_EPStartXfer+0xd42>
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d120      	bne.n	8005bb2 <USB_EPStartXfer+0xd42>
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b78:	1d3b      	adds	r3, r7, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b88:	4413      	add	r3, r2
 8005b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	011a      	lsls	r2, r3, #4
 8005b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d175      	bne.n	8005cb0 <USB_EPStartXfer+0xe40>
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bdc:	4413      	add	r3, r2
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bee:	4413      	add	r3, r2
 8005bf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <USB_EPStartXfer+0xdc0>
 8005c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e061      	b.n	8005cf4 <USB_EPStartXfer+0xe84>
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b3e      	cmp	r3, #62	; 0x3e
 8005c38:	d81a      	bhi.n	8005c70 <USB_EPStartXfer+0xe00>
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <USB_EPStartXfer+0xdee>
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	029b      	lsls	r3, r3, #10
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e041      	b.n	8005cf4 <USB_EPStartXfer+0xe84>
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0xe24>
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e021      	b.n	8005cf4 <USB_EPStartXfer+0xe84>
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d11c      	bne.n	8005cf4 <USB_EPStartXfer+0xe84>
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	011a      	lsls	r2, r3, #4
 8005cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cf2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 81a4 	beq.w	8006048 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d14:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <USB_EPStartXfer+0xebc>
 8005d20:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d2c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 8187 	bne.w	8006048 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d3a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 8180 	bne.w	8006048 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
 8005d8c:	e15c      	b.n	8006048 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d8e:	463b      	mov	r3, r7
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 8155 	bne.w	8006044 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d90e      	bls.n	8005dc8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	619a      	str	r2, [r3, #24]
 8005dc6:	e008      	b.n	8005dda <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d16f      	bne.n	8005ec4 <USB_EPStartXfer+0x1054>
 8005de4:	1d3b      	adds	r3, r7, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e02:	463b      	mov	r3, r7
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	011a      	lsls	r2, r3, #4
 8005e0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e0e:	4413      	add	r3, r2
 8005e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <USB_EPStartXfer+0xfde>
 8005e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e05f      	b.n	8005f0e <USB_EPStartXfer+0x109e>
 8005e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e52:	2b3e      	cmp	r3, #62	; 0x3e
 8005e54:	d818      	bhi.n	8005e88 <USB_EPStartXfer+0x1018>
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <USB_EPStartXfer+0x1006>
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e042      	b.n	8005f0e <USB_EPStartXfer+0x109e>
 8005e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0x1038>
 8005e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e024      	b.n	8005f0e <USB_EPStartXfer+0x109e>
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d11f      	bne.n	8005f0e <USB_EPStartXfer+0x109e>
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	011a      	lsls	r2, r3, #4
 8005ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d16f      	bne.n	8006000 <USB_EPStartXfer+0x1190>
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f38:	4413      	add	r3, r2
 8005f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <USB_EPStartXfer+0x111a>
 8005f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e05e      	b.n	8006048 <USB_EPStartXfer+0x11d8>
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f90:	d818      	bhi.n	8005fc4 <USB_EPStartXfer+0x1154>
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <USB_EPStartXfer+0x1142>
 8005fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fac:	3301      	adds	r3, #1
 8005fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e041      	b.n	8006048 <USB_EPStartXfer+0x11d8>
 8005fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <USB_EPStartXfer+0x1174>
 8005fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	e023      	b.n	8006048 <USB_EPStartXfer+0x11d8>
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d11e      	bne.n	8006048 <USB_EPStartXfer+0x11d8>
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800601a:	4413      	add	r3, r2
 800601c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	011a      	lsls	r2, r3, #4
 8006028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800602c:	4413      	add	r3, r2
 800602e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e001      	b.n	8006048 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e02e      	b.n	80060a6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006066:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800606a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800606e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006072:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006076:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800607a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d8:	81bb      	strh	r3, [r7, #12]
 80060da:	89bb      	ldrh	r3, [r7, #12]
 80060dc:	f083 0310 	eor.w	r3, r3, #16
 80060e0:	81bb      	strh	r3, [r7, #12]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	89bb      	ldrh	r3, [r7, #12]
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
 8006102:	e01f      	b.n	8006144 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	81fb      	strh	r3, [r7, #14]
 800611c:	89fb      	ldrh	r3, [r7, #14]
 800611e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006122:	81fb      	strh	r3, [r7, #14]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	7b1b      	ldrb	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 809d 	bne.w	800629e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d04c      	beq.n	8006206 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	823b      	strh	r3, [r7, #16]
 800617a:	8a3b      	ldrh	r3, [r7, #16]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01b      	beq.n	80061bc <USB_EPClearStall+0x6c>
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	81fb      	strh	r3, [r7, #14]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	78db      	ldrb	r3, [r3, #3]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d06c      	beq.n	800629e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061da:	81bb      	strh	r3, [r7, #12]
 80061dc:	89bb      	ldrh	r3, [r7, #12]
 80061de:	f083 0320 	eor.w	r3, r3, #32
 80061e2:	81bb      	strh	r3, [r7, #12]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	89bb      	ldrh	r3, [r7, #12]
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
 8006204:	e04b      	b.n	800629e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	82fb      	strh	r3, [r7, #22]
 8006214:	8afb      	ldrh	r3, [r7, #22]
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <USB_EPClearStall+0x106>
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	82bb      	strh	r3, [r7, #20]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8abb      	ldrh	r3, [r7, #20]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	827b      	strh	r3, [r7, #18]
 800626e:	8a7b      	ldrh	r3, [r7, #18]
 8006270:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006274:	827b      	strh	r3, [r7, #18]
 8006276:	8a7b      	ldrh	r3, [r7, #18]
 8006278:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800627c:	827b      	strh	r3, [r7, #18]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8a7b      	ldrh	r3, [r7, #18]
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2280      	movs	r2, #128	; 0x80
 80062c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006306:	b29b      	uxth	r3, r3
 8006308:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr

08006316 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800632c:	b480      	push	{r7}
 800632e:	b08d      	sub	sp, #52	; 0x34
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4611      	mov	r1, r2
 8006338:	461a      	mov	r2, r3
 800633a:	460b      	mov	r3, r1
 800633c:	80fb      	strh	r3, [r7, #6]
 800633e:	4613      	mov	r3, r2
 8006340:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006342:	88bb      	ldrh	r3, [r7, #4]
 8006344:	3301      	adds	r3, #1
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	005a      	lsls	r2, r3, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006364:	e01e      	b.n	80063a4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	3301      	adds	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	021b      	lsls	r3, r3, #8
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	b29a      	uxth	r2, r3
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	3302      	adds	r3, #2
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	3302      	adds	r3, #2
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	3301      	adds	r3, #1
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	3b01      	subs	r3, #1
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1dd      	bne.n	8006366 <USB_WritePMA+0x3a>
  }
}
 80063aa:	bf00      	nop
 80063ac:	3734      	adds	r7, #52	; 0x34
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b08b      	sub	sp, #44	; 0x2c
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	460b      	mov	r3, r1
 80063c4:	80fb      	strh	r3, [r7, #6]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80063ca:	88bb      	ldrh	r3, [r7, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	005a      	lsls	r2, r3, #1
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
 80063ec:	e01b      	b.n	8006426 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	3302      	adds	r3, #2
 80063fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	b2da      	uxtb	r2, r3
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	3302      	adds	r3, #2
 800641e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	3b01      	subs	r3, #1
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e0      	bne.n	80063ee <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	701a      	strb	r2, [r3, #0]
  }
}
 8006448:	bf00      	nop
 800644a:	372c      	adds	r7, #44	; 0x2c
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7c1b      	ldrb	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d115      	bne.n	8006496 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800646a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646e:	2202      	movs	r2, #2
 8006470:	2181      	movs	r1, #129	; 0x81
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fe39 	bl	80080ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800647e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006482:	2202      	movs	r2, #2
 8006484:	2101      	movs	r1, #1
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fe2f 	bl	80080ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006494:	e012      	b.n	80064bc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	2202      	movs	r2, #2
 800649a:	2181      	movs	r1, #129	; 0x81
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fe24 	bl	80080ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	2202      	movs	r2, #2
 80064ac:	2101      	movs	r1, #1
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fe1b 	bl	80080ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064bc:	2308      	movs	r3, #8
 80064be:	2203      	movs	r2, #3
 80064c0:	2182      	movs	r1, #130	; 0x82
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fe11 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064d2:	f001 ff31 	bl	8008338 <USBD_static_malloc>
 80064d6:	4602      	mov	r2, r0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e026      	b.n	800653c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7c1b      	ldrb	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800651e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006522:	2101      	movs	r1, #1
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fed1 	bl	80082cc <USBD_LL_PrepareReceive>
 800652a:	e007      	b.n	800653c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	2101      	movs	r1, #1
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fec8 	bl	80082cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006556:	2181      	movs	r1, #129	; 0x81
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fdec 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006564:	2101      	movs	r1, #1
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fde5 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006574:	2182      	movs	r1, #130	; 0x82
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fddd 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00e      	beq.n	80065aa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fed7 	bl	8008350 <USBD_static_free>
    pdev->pClassData = NULL;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d039      	beq.n	8006652 <USBD_CDC_Setup+0x9e>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d17c      	bne.n	80066dc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	88db      	ldrh	r3, [r3, #6]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d029      	beq.n	800663e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da11      	bge.n	8006618 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006600:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	88d2      	ldrh	r2, [r2, #6]
 8006606:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006608:	6939      	ldr	r1, [r7, #16]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	88db      	ldrh	r3, [r3, #6]
 800660e:	461a      	mov	r2, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f9e3 	bl	80079dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006616:	e068      	b.n	80066ea <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	785a      	ldrb	r2, [r3, #1]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	88db      	ldrh	r3, [r3, #6]
 8006626:	b2da      	uxtb	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800662e:	6939      	ldr	r1, [r7, #16]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	88db      	ldrh	r3, [r3, #6]
 8006634:	461a      	mov	r2, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f9fe 	bl	8007a38 <USBD_CtlPrepareRx>
      break;
 800663c:	e055      	b.n	80066ea <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	7850      	ldrb	r0, [r2, #1]
 800664a:	2200      	movs	r2, #0
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	4798      	blx	r3
      break;
 8006650:	e04b      	b.n	80066ea <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b0a      	cmp	r3, #10
 8006658:	d017      	beq.n	800668a <USBD_CDC_Setup+0xd6>
 800665a:	2b0b      	cmp	r3, #11
 800665c:	d029      	beq.n	80066b2 <USBD_CDC_Setup+0xfe>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d133      	bne.n	80066ca <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006668:	2b03      	cmp	r3, #3
 800666a:	d107      	bne.n	800667c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	2202      	movs	r2, #2
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f9b1 	bl	80079dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800667a:	e02e      	b.n	80066da <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 f942 	bl	8007908 <USBD_CtlError>
            ret = USBD_FAIL;
 8006684:	2302      	movs	r3, #2
 8006686:	75fb      	strb	r3, [r7, #23]
          break;
 8006688:	e027      	b.n	80066da <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006690:	2b03      	cmp	r3, #3
 8006692:	d107      	bne.n	80066a4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006694:	f107 030f 	add.w	r3, r7, #15
 8006698:	2201      	movs	r2, #1
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f99d 	bl	80079dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066a2:	e01a      	b.n	80066da <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 f92e 	bl	8007908 <USBD_CtlError>
            ret = USBD_FAIL;
 80066ac:	2302      	movs	r3, #2
 80066ae:	75fb      	strb	r3, [r7, #23]
          break;
 80066b0:	e013      	b.n	80066da <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d00d      	beq.n	80066d8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f922 	bl	8007908 <USBD_CtlError>
            ret = USBD_FAIL;
 80066c4:	2302      	movs	r3, #2
 80066c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066c8:	e006      	b.n	80066d8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f91b 	bl	8007908 <USBD_CtlError>
          ret = USBD_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	75fb      	strb	r3, [r7, #23]
          break;
 80066d6:	e000      	b.n	80066da <USBD_CDC_Setup+0x126>
          break;
 80066d8:	bf00      	nop
      }
      break;
 80066da:	e006      	b.n	80066ea <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f912 	bl	8007908 <USBD_CtlError>
      ret = USBD_FAIL;
 80066e4:	2302      	movs	r3, #2
 80066e6:	75fb      	strb	r3, [r7, #23]
      break;
 80066e8:	bf00      	nop
  }

  return ret;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800670e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d03a      	beq.n	8006790 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	331c      	adds	r3, #28
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d029      	beq.n	8006784 <USBD_CDC_DataIn+0x90>
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	331c      	adds	r3, #28
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	78f9      	ldrb	r1, [r7, #3]
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	460b      	mov	r3, r1
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4403      	add	r3, r0
 8006750:	3338      	adds	r3, #56	; 0x38
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	fbb2 f1f3 	udiv	r1, r2, r3
 8006758:	fb03 f301 	mul.w	r3, r3, r1
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d110      	bne.n	8006784 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	331c      	adds	r3, #28
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006776:	78f9      	ldrb	r1, [r7, #3]
 8006778:	2300      	movs	r3, #0
 800677a:	2200      	movs	r2, #0
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fd82 	bl	8008286 <USBD_LL_Transmit>
 8006782:	e003      	b.n	800678c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fdad 	bl	8008312 <USBD_LL_GetRxDataSize>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067de:	4611      	mov	r1, r2
 80067e0:	4798      	blx	r3

    return USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <USBD_CDC_EP0_RxReady+0x46>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006810:	2bff      	cmp	r3, #255	; 0xff
 8006812:	d010      	beq.n	8006836 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006822:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800682a:	b292      	uxth	r2, r2
 800682c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2243      	movs	r2, #67	; 0x43
 800684c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20000094 	.word	0x20000094

08006860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2243      	movs	r2, #67	; 0x43
 800686c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800686e:	4b03      	ldr	r3, [pc, #12]	; (800687c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	20000050 	.word	0x20000050

08006880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2243      	movs	r2, #67	; 0x43
 800688c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800688e:	4b03      	ldr	r3, [pc, #12]	; (800689c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	200000d8 	.word	0x200000d8

080068a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	220a      	movs	r2, #10
 80068ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80068ae:	4b03      	ldr	r3, [pc, #12]	; (80068bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80068ca:	2302      	movs	r3, #2
 80068cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d017      	beq.n	800698e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7c1b      	ldrb	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800696c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006970:	2101      	movs	r1, #1
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fcaa 	bl	80082cc <USBD_LL_PrepareReceive>
 8006978:	e007      	b.n	800698a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2101      	movs	r1, #1
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 fca1 	bl	80082cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80069ac:	4814      	ldr	r0, [pc, #80]	; (8006a00 <USBD_Init+0x68>)
 80069ae:	f001 fd41 	bl	8008434 <iprintf>
 80069b2:	4814      	ldr	r0, [pc, #80]	; (8006a04 <USBD_Init+0x6c>)
 80069b4:	f001 fd3e 	bl	8008434 <iprintf>
 80069b8:	200a      	movs	r0, #10
 80069ba:	f001 fd53 	bl	8008464 <putchar>
#endif
    return USBD_FAIL;
 80069be:	2302      	movs	r3, #2
 80069c0:	e01a      	b.n	80069f8 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	79fa      	ldrb	r2, [r7, #7]
 80069ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fb05 	bl	8008000 <USBD_LL_Init>

  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	080092d0 	.word	0x080092d0
 8006a04:	080092d8 	.word	0x080092d8

08006a08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d006      	beq.n	8006a2a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e00a      	b.n	8006a40 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006a2a:	4808      	ldr	r0, [pc, #32]	; (8006a4c <USBD_RegisterClass+0x44>)
 8006a2c:	f001 fd02 	bl	8008434 <iprintf>
 8006a30:	4807      	ldr	r0, [pc, #28]	; (8006a50 <USBD_RegisterClass+0x48>)
 8006a32:	f001 fcff 	bl	8008434 <iprintf>
 8006a36:	200a      	movs	r0, #10
 8006a38:	f001 fd14 	bl	8008464 <putchar>
#endif
    status = USBD_FAIL;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	080092d0 	.word	0x080092d0
 8006a50:	080092f0 	.word	0x080092f0

08006a54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fb29 	bl	80080b4 <USBD_LL_Start>

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00c      	beq.n	8006ab4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 feca 	bl	8007890 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d00c      	beq.n	8006b3a <USBD_LL_SetupStage+0x56>
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d302      	bcc.n	8006b2a <USBD_LL_SetupStage+0x46>
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d010      	beq.n	8006b4a <USBD_LL_SetupStage+0x66>
 8006b28:	e017      	b.n	8006b5a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9ca 	bl	8006ecc <USBD_StdDevReq>
      break;
 8006b38:	e01a      	b.n	8006b70 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa2c 	bl	8006fa0 <USBD_StdItfReq>
      break;
 8006b48:	e012      	b.n	8006b70 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa6a 	bl	800702c <USBD_StdEPReq>
      break;
 8006b58:	e00a      	b.n	8006b70 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fb03 	bl	8008174 <USBD_LL_StallEP>
      break;
 8006b6e:	bf00      	nop
  }

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	460b      	mov	r3, r1
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d14b      	bne.n	8006c26 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d134      	bne.n	8006c0a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d919      	bls.n	8006be0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	1ad2      	subs	r2, r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d203      	bcs.n	8006bce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	e002      	b.n	8006bd4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 ff4b 	bl	8007a74 <USBD_CtlContinueRx>
 8006bde:	e038      	b.n	8006c52 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d105      	bne.n	8006c02 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 ff48 	bl	8007a98 <USBD_CtlSendStatus>
 8006c08:	e023      	b.n	8006c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c10:	2b05      	cmp	r3, #5
 8006c12:	d11e      	bne.n	8006c52 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 faa8 	bl	8008174 <USBD_LL_StallEP>
 8006c24:	e015      	b.n	8006c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d108      	bne.n	8006c4e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	7afa      	ldrb	r2, [r7, #11]
 8006c46:	4611      	mov	r1, r2
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	4798      	blx	r3
 8006c4c:	e001      	b.n	8006c52 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e000      	b.n	8006c54 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	460b      	mov	r3, r1
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d17f      	bne.n	8006d70 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3314      	adds	r3, #20
 8006c74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d15c      	bne.n	8006d3a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d915      	bls.n	8006cb8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 feb5 	bl	8007a14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006caa:	2300      	movs	r3, #0
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f001 fb0b 	bl	80082cc <USBD_LL_PrepareReceive>
 8006cb6:	e04e      	b.n	8006d56 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	6912      	ldr	r2, [r2, #16]
 8006cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc4:	fb02 f201 	mul.w	r2, r2, r1
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d11c      	bne.n	8006d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d316      	bcc.n	8006d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d20f      	bcs.n	8006d08 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2100      	movs	r1, #0
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fe91 	bl	8007a14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f001 fae3 	bl	80082cc <USBD_LL_PrepareReceive>
 8006d06:	e026      	b.n	8006d56 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d105      	bne.n	8006d2a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f001 fa21 	bl	8008174 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fec3 	bl	8007abe <USBD_CtlReceiveStatus>
 8006d38:	e00d      	b.n	8006d56 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d004      	beq.n	8006d4e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f001 fa0f 	bl	8008174 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d11d      	bne.n	8006d9c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fe83 	bl	8006a6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d6e:	e015      	b.n	8006d9c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d108      	bne.n	8006d98 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	7afa      	ldrb	r2, [r7, #11]
 8006d90:	4611      	mov	r1, r2
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	4798      	blx	r3
 8006d96:	e001      	b.n	8006d9c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e000      	b.n	8006d9e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dae:	2340      	movs	r3, #64	; 0x40
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f998 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dca:	2340      	movs	r3, #64	; 0x40
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f98a 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2240      	movs	r2, #64	; 0x40
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6852      	ldr	r2, [r2, #4]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
  }

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d105      	bne.n	8006e8c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d10b      	bne.n	8006ec2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d004      	beq.n	8006ef0 <USBD_StdDevReq+0x24>
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d002      	beq.n	8006ef0 <USBD_StdDevReq+0x24>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <USBD_StdDevReq+0x34>
 8006eee:	e04c      	b.n	8006f8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
      break;
 8006efe:	e049      	b.n	8006f94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b09      	cmp	r3, #9
 8006f06:	d83a      	bhi.n	8006f7e <USBD_StdDevReq+0xb2>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <USBD_StdDevReq+0x44>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	08006f7f 	.word	0x08006f7f
 8006f1c:	08006f6b 	.word	0x08006f6b
 8006f20:	08006f7f 	.word	0x08006f7f
 8006f24:	08006f43 	.word	0x08006f43
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f7f 	.word	0x08006f7f
 8006f30:	08006f57 	.word	0x08006f57
 8006f34:	08006f4d 	.word	0x08006f4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9d4 	bl	80072e8 <USBD_GetDescriptor>
          break;
 8006f40:	e022      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fb37 	bl	80075b8 <USBD_SetAddress>
          break;
 8006f4a:	e01d      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb74 	bl	800763c <USBD_SetConfig>
          break;
 8006f54:	e018      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fbfd 	bl	8007758 <USBD_GetConfig>
          break;
 8006f5e:	e013      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc2c 	bl	80077c0 <USBD_GetStatus>
          break;
 8006f68:	e00e      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc5a 	bl	8007826 <USBD_SetFeature>
          break;
 8006f72:	e009      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fc69 	bl	800784e <USBD_ClrFeature>
          break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fcc1 	bl	8007908 <USBD_CtlError>
          break;
 8006f86:	bf00      	nop
      }
      break;
 8006f88:	e004      	b.n	8006f94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fcbb 	bl	8007908 <USBD_CtlError>
      break;
 8006f92:	bf00      	nop
  }

  return ret;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop

08006fa0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d003      	beq.n	8006fc2 <USBD_StdItfReq+0x22>
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d001      	beq.n	8006fc2 <USBD_StdItfReq+0x22>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d12a      	bne.n	8007018 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d81d      	bhi.n	800700a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	889b      	ldrh	r3, [r3, #4]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d813      	bhi.n	8007000 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	88db      	ldrh	r3, [r3, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <USBD_StdItfReq+0x74>
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10d      	bne.n	8007014 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fd4d 	bl	8007a98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ffe:	e009      	b.n	8007014 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fc80 	bl	8007908 <USBD_CtlError>
          break;
 8007008:	e004      	b.n	8007014 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc7b 	bl	8007908 <USBD_CtlError>
          break;
 8007012:	e000      	b.n	8007016 <USBD_StdItfReq+0x76>
          break;
 8007014:	bf00      	nop
      }
      break;
 8007016:	e004      	b.n	8007022 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fc74 	bl	8007908 <USBD_CtlError>
      break;
 8007020:	bf00      	nop
  }

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	889b      	ldrh	r3, [r3, #4]
 800703e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007048:	2b20      	cmp	r3, #32
 800704a:	d004      	beq.n	8007056 <USBD_StdEPReq+0x2a>
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	d002      	beq.n	8007056 <USBD_StdEPReq+0x2a>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <USBD_StdEPReq+0x3a>
 8007054:	e13d      	b.n	80072d2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
      break;
 8007064:	e13a      	b.n	80072dc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800706e:	2b20      	cmp	r3, #32
 8007070:	d10a      	bne.n	8007088 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	e12a      	b.n	80072de <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d03e      	beq.n	800710e <USBD_StdEPReq+0xe2>
 8007090:	2b03      	cmp	r3, #3
 8007092:	d002      	beq.n	800709a <USBD_StdEPReq+0x6e>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d070      	beq.n	800717a <USBD_StdEPReq+0x14e>
 8007098:	e115      	b.n	80072c6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d002      	beq.n	80070aa <USBD_StdEPReq+0x7e>
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d015      	beq.n	80070d4 <USBD_StdEPReq+0xa8>
 80070a8:	e02b      	b.n	8007102 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <USBD_StdEPReq+0x9e>
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d009      	beq.n	80070ca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f85a 	bl	8008174 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 f856 	bl	8008174 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070c8:	e020      	b.n	800710c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc1b 	bl	8007908 <USBD_CtlError>
              break;
 80070d2:	e01b      	b.n	800710c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	885b      	ldrh	r3, [r3, #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10e      	bne.n	80070fa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <USBD_StdEPReq+0xce>
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b80      	cmp	r3, #128	; 0x80
 80070e6:	d008      	beq.n	80070fa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	88db      	ldrh	r3, [r3, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f83d 	bl	8008174 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fccc 	bl	8007a98 <USBD_CtlSendStatus>

              break;
 8007100:	e004      	b.n	800710c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fbff 	bl	8007908 <USBD_CtlError>
              break;
 800710a:	bf00      	nop
          }
          break;
 800710c:	e0e0      	b.n	80072d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	2b02      	cmp	r3, #2
 8007116:	d002      	beq.n	800711e <USBD_StdEPReq+0xf2>
 8007118:	2b03      	cmp	r3, #3
 800711a:	d015      	beq.n	8007148 <USBD_StdEPReq+0x11c>
 800711c:	e026      	b.n	800716c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <USBD_StdEPReq+0x112>
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b80      	cmp	r3, #128	; 0x80
 8007128:	d009      	beq.n	800713e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f820 	bl	8008174 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f81c 	bl	8008174 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800713c:	e01c      	b.n	8007178 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fbe1 	bl	8007908 <USBD_CtlError>
              break;
 8007146:	e017      	b.n	8007178 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	885b      	ldrh	r3, [r3, #2]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d112      	bne.n	8007176 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f001 f827 	bl	80081b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc97 	bl	8007a98 <USBD_CtlSendStatus>
              }
              break;
 800716a:	e004      	b.n	8007176 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fbca 	bl	8007908 <USBD_CtlError>
              break;
 8007174:	e000      	b.n	8007178 <USBD_StdEPReq+0x14c>
              break;
 8007176:	bf00      	nop
          }
          break;
 8007178:	e0aa      	b.n	80072d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	2b02      	cmp	r3, #2
 8007182:	d002      	beq.n	800718a <USBD_StdEPReq+0x15e>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d032      	beq.n	80071ee <USBD_StdEPReq+0x1c2>
 8007188:	e097      	b.n	80072ba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <USBD_StdEPReq+0x174>
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	d004      	beq.n	80071a0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fbb5 	bl	8007908 <USBD_CtlError>
                break;
 800719e:	e091      	b.n	80072c4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da0b      	bge.n	80071c0 <USBD_StdEPReq+0x194>
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3310      	adds	r3, #16
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	3304      	adds	r3, #4
 80071be:	e00b      	b.n	80071d8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2202      	movs	r2, #2
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fbf8 	bl	80079dc <USBD_CtlSendData>
              break;
 80071ec:	e06a      	b.n	80072c4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da11      	bge.n	800721a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	3318      	adds	r3, #24
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d117      	bne.n	8007240 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb78 	bl	8007908 <USBD_CtlError>
                  break;
 8007218:	e054      	b.n	80072c4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb65 	bl	8007908 <USBD_CtlError>
                  break;
 800723e:	e041      	b.n	80072c4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	da0b      	bge.n	8007260 <USBD_StdEPReq+0x234>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	3310      	adds	r3, #16
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	3304      	adds	r3, #4
 800725e:	e00b      	b.n	8007278 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <USBD_StdEPReq+0x25a>
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d103      	bne.n	800728e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e00e      	b.n	80072ac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 ffac 	bl	80081f0 <USBD_LL_IsStallEP>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e002      	b.n	80072ac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2202      	movs	r2, #2
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fb92 	bl	80079dc <USBD_CtlSendData>
              break;
 80072b8:	e004      	b.n	80072c4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb23 	bl	8007908 <USBD_CtlError>
              break;
 80072c2:	bf00      	nop
          }
          break;
 80072c4:	e004      	b.n	80072d0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb1d 	bl	8007908 <USBD_CtlError>
          break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fb17 	bl	8007908 <USBD_CtlError>
      break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	2b06      	cmp	r3, #6
 800730a:	f200 8128 	bhi.w	800755e <USBD_GetDescriptor+0x276>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <USBD_GetDescriptor+0x2c>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007331 	.word	0x08007331
 8007318:	08007349 	.word	0x08007349
 800731c:	08007389 	.word	0x08007389
 8007320:	0800755f 	.word	0x0800755f
 8007324:	0800755f 	.word	0x0800755f
 8007328:	080074ff 	.word	0x080074ff
 800732c:	0800752b 	.word	0x0800752b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7c12      	ldrb	r2, [r2, #16]
 800733c:	f107 0108 	add.w	r1, r7, #8
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
 8007344:	60f8      	str	r0, [r7, #12]
      break;
 8007346:	e112      	b.n	800756e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7c1b      	ldrb	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10d      	bne.n	800736c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f107 0208 	add.w	r2, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	2202      	movs	r2, #2
 8007368:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800736a:	e100      	b.n	800756e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	f107 0208 	add.w	r2, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	2202      	movs	r2, #2
 8007384:	701a      	strb	r2, [r3, #0]
      break;
 8007386:	e0f2      	b.n	800756e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	885b      	ldrh	r3, [r3, #2]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b05      	cmp	r3, #5
 8007390:	f200 80ac 	bhi.w	80074ec <USBD_GetDescriptor+0x204>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_GetDescriptor+0xb4>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073e9 	.word	0x080073e9
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	08007451 	.word	0x08007451
 80073ac:	08007485 	.word	0x08007485
 80073b0:	080074b9 	.word	0x080074b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073d6:	e091      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa94 	bl	8007908 <USBD_CtlError>
            err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
          break;
 80073e6:	e089      	b.n	80074fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740a:	e077      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa7a 	bl	8007908 <USBD_CtlError>
            err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
          break;
 800741a:	e06f      	b.n	80074fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800743e:	e05d      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa60 	bl	8007908 <USBD_CtlError>
            err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
          break;
 800744e:	e055      	b.n	80074fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007472:	e043      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa46 	bl	8007908 <USBD_CtlError>
            err++;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	3301      	adds	r3, #1
 8007480:	72fb      	strb	r3, [r7, #11]
          break;
 8007482:	e03b      	b.n	80074fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	7c12      	ldrb	r2, [r2, #16]
 800749c:	f107 0108 	add.w	r1, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074a6:	e029      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa2c 	bl	8007908 <USBD_CtlError>
            err++;
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	3301      	adds	r3, #1
 80074b4:	72fb      	strb	r3, [r7, #11]
          break;
 80074b6:	e021      	b.n	80074fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	7c12      	ldrb	r2, [r2, #16]
 80074d0:	f107 0108 	add.w	r1, r7, #8
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074da:	e00f      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa12 	bl	8007908 <USBD_CtlError>
            err++;
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	3301      	adds	r3, #1
 80074e8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ea:	e007      	b.n	80074fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa0a 	bl	8007908 <USBD_CtlError>
          err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074fa:	e038      	b.n	800756e <USBD_GetDescriptor+0x286>
 80074fc:	e037      	b.n	800756e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7c1b      	ldrb	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	f107 0208 	add.w	r2, r7, #8
 8007512:	4610      	mov	r0, r2
 8007514:	4798      	blx	r3
 8007516:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007518:	e029      	b.n	800756e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9f3 	bl	8007908 <USBD_CtlError>
        err++;
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	3301      	adds	r3, #1
 8007526:	72fb      	strb	r3, [r7, #11]
      break;
 8007528:	e021      	b.n	800756e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1b      	ldrb	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	4610      	mov	r0, r2
 8007540:	4798      	blx	r3
 8007542:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	2207      	movs	r2, #7
 800754a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800754c:	e00f      	b.n	800756e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9d9 	bl	8007908 <USBD_CtlError>
        err++;
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	3301      	adds	r3, #1
 800755a:	72fb      	strb	r3, [r7, #11]
      break;
 800755c:	e007      	b.n	800756e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f9d1 	bl	8007908 <USBD_CtlError>
      err++;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	3301      	adds	r3, #1
 800756a:	72fb      	strb	r3, [r7, #11]
      break;
 800756c:	bf00      	nop
  }

  if (err != 0U)
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11c      	bne.n	80075ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007574:	893b      	ldrh	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d011      	beq.n	800759e <USBD_GetDescriptor+0x2b6>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00d      	beq.n	800759e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88da      	ldrh	r2, [r3, #6]
 8007586:	893b      	ldrh	r3, [r7, #8]
 8007588:	4293      	cmp	r3, r2
 800758a:	bf28      	it	cs
 800758c:	4613      	movcs	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007592:	893b      	ldrh	r3, [r7, #8]
 8007594:	461a      	mov	r2, r3
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa1f 	bl	80079dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88db      	ldrh	r3, [r3, #6]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa76 	bl	8007a98 <USBD_CtlSendStatus>
 80075ac:	e000      	b.n	80075b0 <USBD_GetDescriptor+0x2c8>
    return;
 80075ae:	bf00      	nop
    }
  }
}
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop

080075b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	889b      	ldrh	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d130      	bne.n	800762c <USBD_SetAddress+0x74>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d12c      	bne.n	800762c <USBD_SetAddress+0x74>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	885b      	ldrh	r3, [r3, #2]
 80075d6:	2b7f      	cmp	r3, #127	; 0x7f
 80075d8:	d828      	bhi.n	800762c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	885b      	ldrh	r3, [r3, #2]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d104      	bne.n	80075fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f988 	bl	8007908 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f8:	e01c      	b.n	8007634 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7bfa      	ldrb	r2, [r7, #15]
 80075fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fe1e 	bl	8008248 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa43 	bl	8007a98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	e008      	b.n	8007634 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762a:	e003      	b.n	8007634 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f96a 	bl	8007908 <USBD_CtlError>
  }
}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	885b      	ldrh	r3, [r3, #2]
 800764a:	b2da      	uxtb	r2, r3
 800764c:	4b41      	ldr	r3, [pc, #260]	; (8007754 <USBD_SetConfig+0x118>)
 800764e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007650:	4b40      	ldr	r3, [pc, #256]	; (8007754 <USBD_SetConfig+0x118>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d904      	bls.n	8007662 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f954 	bl	8007908 <USBD_CtlError>
 8007660:	e075      	b.n	800774e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007668:	2b02      	cmp	r3, #2
 800766a:	d002      	beq.n	8007672 <USBD_SetConfig+0x36>
 800766c:	2b03      	cmp	r3, #3
 800766e:	d023      	beq.n	80076b8 <USBD_SetConfig+0x7c>
 8007670:	e062      	b.n	8007738 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007672:	4b38      	ldr	r3, [pc, #224]	; (8007754 <USBD_SetConfig+0x118>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01a      	beq.n	80076b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800767a:	4b36      	ldr	r3, [pc, #216]	; (8007754 <USBD_SetConfig+0x118>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2203      	movs	r2, #3
 8007688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800768c:	4b31      	ldr	r3, [pc, #196]	; (8007754 <USBD_SetConfig+0x118>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff f9f4 	bl	8006a80 <USBD_SetClassConfig>
 8007698:	4603      	mov	r3, r0
 800769a:	2b02      	cmp	r3, #2
 800769c:	d104      	bne.n	80076a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f931 	bl	8007908 <USBD_CtlError>
            return;
 80076a6:	e052      	b.n	800774e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f9f5 	bl	8007a98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076ae:	e04e      	b.n	800774e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f9f1 	bl	8007a98 <USBD_CtlSendStatus>
        break;
 80076b6:	e04a      	b.n	800774e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076b8:	4b26      	ldr	r3, [pc, #152]	; (8007754 <USBD_SetConfig+0x118>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d112      	bne.n	80076e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <USBD_SetConfig+0x118>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076d2:	4b20      	ldr	r3, [pc, #128]	; (8007754 <USBD_SetConfig+0x118>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff f9f0 	bl	8006abe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9da 	bl	8007a98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076e4:	e033      	b.n	800774e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076e6:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <USBD_SetConfig+0x118>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d01d      	beq.n	8007730 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff f9de 	bl	8006abe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <USBD_SetConfig+0x118>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <USBD_SetConfig+0x118>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff f9b4 	bl	8006a80 <USBD_SetClassConfig>
 8007718:	4603      	mov	r3, r0
 800771a:	2b02      	cmp	r3, #2
 800771c:	d104      	bne.n	8007728 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f8f1 	bl	8007908 <USBD_CtlError>
            return;
 8007726:	e012      	b.n	800774e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9b5 	bl	8007a98 <USBD_CtlSendStatus>
        break;
 800772e:	e00e      	b.n	800774e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f9b1 	bl	8007a98 <USBD_CtlSendStatus>
        break;
 8007736:	e00a      	b.n	800774e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8e4 	bl	8007908 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <USBD_SetConfig+0x118>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff f9b9 	bl	8006abe <USBD_ClrClassConfig>
        break;
 800774c:	bf00      	nop
    }
  }
}
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000200 	.word	0x20000200

08007758 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	88db      	ldrh	r3, [r3, #6]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d004      	beq.n	8007774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f8cb 	bl	8007908 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007772:	e021      	b.n	80077b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777a:	2b01      	cmp	r3, #1
 800777c:	db17      	blt.n	80077ae <USBD_GetConfig+0x56>
 800777e:	2b02      	cmp	r3, #2
 8007780:	dd02      	ble.n	8007788 <USBD_GetConfig+0x30>
 8007782:	2b03      	cmp	r3, #3
 8007784:	d00b      	beq.n	800779e <USBD_GetConfig+0x46>
 8007786:	e012      	b.n	80077ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3308      	adds	r3, #8
 8007792:	2201      	movs	r2, #1
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f920 	bl	80079dc <USBD_CtlSendData>
        break;
 800779c:	e00c      	b.n	80077b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	2201      	movs	r2, #1
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f918 	bl	80079dc <USBD_CtlSendData>
        break;
 80077ac:	e004      	b.n	80077b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f8a9 	bl	8007908 <USBD_CtlError>
        break;
 80077b6:	bf00      	nop
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d0:	3b01      	subs	r3, #1
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d81e      	bhi.n	8007814 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	88db      	ldrh	r3, [r3, #6]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d004      	beq.n	80077e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f891 	bl	8007908 <USBD_CtlError>
        break;
 80077e6:	e01a      	b.n	800781e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f043 0202 	orr.w	r2, r3, #2
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	330c      	adds	r3, #12
 8007808:	2202      	movs	r2, #2
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8e5 	bl	80079dc <USBD_CtlSendData>
      break;
 8007812:	e004      	b.n	800781e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f876 	bl	8007908 <USBD_CtlError>
      break;
 800781c:	bf00      	nop
  }
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	885b      	ldrh	r3, [r3, #2]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d106      	bne.n	8007846 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f929 	bl	8007a98 <USBD_CtlSendStatus>
  }
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785e:	3b01      	subs	r3, #1
 8007860:	2b02      	cmp	r3, #2
 8007862:	d80b      	bhi.n	800787c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	885b      	ldrh	r3, [r3, #2]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10c      	bne.n	8007886 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f90f 	bl	8007a98 <USBD_CtlSendStatus>
      }
      break;
 800787a:	e004      	b.n	8007886 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f842 	bl	8007908 <USBD_CtlError>
      break;
 8007884:	e000      	b.n	8007888 <USBD_ClrFeature+0x3a>
      break;
 8007886:	bf00      	nop
  }
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	785a      	ldrb	r2, [r3, #1]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	3302      	adds	r3, #2
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	3303      	adds	r3, #3
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4413      	add	r3, r2
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	3305      	adds	r3, #5
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4413      	add	r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3306      	adds	r3, #6
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	3307      	adds	r3, #7
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	80da      	strh	r2, [r3, #6]

}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fc2d 	bl	8008174 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800791a:	2100      	movs	r1, #0
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc29 	bl	8008174 <USBD_LL_StallEP>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d032      	beq.n	80079a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f834 	bl	80079ae <USBD_GetLen>
 8007946:	4603      	mov	r3, r0
 8007948:	3301      	adds	r3, #1
 800794a:	b29b      	uxth	r3, r3
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	75fa      	strb	r2, [r7, #23]
 800795a:	461a      	mov	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	75fa      	strb	r2, [r7, #23]
 800796c:	461a      	mov	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	2203      	movs	r2, #3
 8007974:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007976:	e012      	b.n	800799e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	60fa      	str	r2, [r7, #12]
 800797e:	7dfa      	ldrb	r2, [r7, #23]
 8007980:	1c51      	adds	r1, r2, #1
 8007982:	75f9      	strb	r1, [r7, #23]
 8007984:	4611      	mov	r1, r2
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	440a      	add	r2, r1
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	75fa      	strb	r2, [r7, #23]
 8007994:	461a      	mov	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e8      	bne.n	8007978 <USBD_GetString+0x4e>
    }
  }
}
 80079a6:	bf00      	nop
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079ba:	e005      	b.n	80079c8 <USBD_GetLen+0x1a>
  {
    len++;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	3301      	adds	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3301      	adds	r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f5      	bne.n	80079bc <USBD_GetLen+0xe>
  }

  return len;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	2100      	movs	r1, #0
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fc3e 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	2100      	movs	r1, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fc2c 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a56:	88fa      	ldrh	r2, [r7, #6]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a5e:	88fb      	ldrh	r3, [r7, #6]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	2100      	movs	r1, #0
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fc31 	bl	80082cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fc1f 	bl	80082cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbe9 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2205      	movs	r2, #5
 8007aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fbf9 	bl	80082cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4912      	ldr	r1, [pc, #72]	; (8007b34 <MX_USB_DEVICE_Init+0x50>)
 8007aec:	4812      	ldr	r0, [pc, #72]	; (8007b38 <MX_USB_DEVICE_Init+0x54>)
 8007aee:	f7fe ff53 	bl	8006998 <USBD_Init>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007af8:	f7f8 fd75 	bl	80005e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007afc:	490f      	ldr	r1, [pc, #60]	; (8007b3c <MX_USB_DEVICE_Init+0x58>)
 8007afe:	480e      	ldr	r0, [pc, #56]	; (8007b38 <MX_USB_DEVICE_Init+0x54>)
 8007b00:	f7fe ff82 	bl	8006a08 <USBD_RegisterClass>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b0a:	f7f8 fd6c 	bl	80005e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b0e:	490c      	ldr	r1, [pc, #48]	; (8007b40 <MX_USB_DEVICE_Init+0x5c>)
 8007b10:	4809      	ldr	r0, [pc, #36]	; (8007b38 <MX_USB_DEVICE_Init+0x54>)
 8007b12:	f7fe fed5 	bl	80068c0 <USBD_CDC_RegisterInterface>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b1c:	f7f8 fd63 	bl	80005e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <MX_USB_DEVICE_Init+0x54>)
 8007b22:	f7fe ff97 	bl	8006a54 <USBD_Start>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b2c:	f7f8 fd5b 	bl	80005e6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	2000012c 	.word	0x2000012c
 8007b38:	20000514 	.word	0x20000514
 8007b3c:	20000018 	.word	0x20000018
 8007b40:	2000011c 	.word	0x2000011c

08007b44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4905      	ldr	r1, [pc, #20]	; (8007b60 <CDC_Init_FS+0x1c>)
 8007b4c:	4805      	ldr	r0, [pc, #20]	; (8007b64 <CDC_Init_FS+0x20>)
 8007b4e:	f7fe fecd 	bl	80068ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b52:	4905      	ldr	r1, [pc, #20]	; (8007b68 <CDC_Init_FS+0x24>)
 8007b54:	4803      	ldr	r0, [pc, #12]	; (8007b64 <CDC_Init_FS+0x20>)
 8007b56:	f7fe fee2 	bl	800691e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000bc0 	.word	0x20000bc0
 8007b64:	20000514 	.word	0x20000514
 8007b68:	200007d8 	.word	0x200007d8

08007b6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
	...

08007b7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b23      	cmp	r3, #35	; 0x23
 8007b90:	d84a      	bhi.n	8007c28 <CDC_Control_FS+0xac>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <CDC_Control_FS+0x1c>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007c29 	.word	0x08007c29
 8007b9c:	08007c29 	.word	0x08007c29
 8007ba0:	08007c29 	.word	0x08007c29
 8007ba4:	08007c29 	.word	0x08007c29
 8007ba8:	08007c29 	.word	0x08007c29
 8007bac:	08007c29 	.word	0x08007c29
 8007bb0:	08007c29 	.word	0x08007c29
 8007bb4:	08007c29 	.word	0x08007c29
 8007bb8:	08007c29 	.word	0x08007c29
 8007bbc:	08007c29 	.word	0x08007c29
 8007bc0:	08007c29 	.word	0x08007c29
 8007bc4:	08007c29 	.word	0x08007c29
 8007bc8:	08007c29 	.word	0x08007c29
 8007bcc:	08007c29 	.word	0x08007c29
 8007bd0:	08007c29 	.word	0x08007c29
 8007bd4:	08007c29 	.word	0x08007c29
 8007bd8:	08007c29 	.word	0x08007c29
 8007bdc:	08007c29 	.word	0x08007c29
 8007be0:	08007c29 	.word	0x08007c29
 8007be4:	08007c29 	.word	0x08007c29
 8007be8:	08007c29 	.word	0x08007c29
 8007bec:	08007c29 	.word	0x08007c29
 8007bf0:	08007c29 	.word	0x08007c29
 8007bf4:	08007c29 	.word	0x08007c29
 8007bf8:	08007c29 	.word	0x08007c29
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c29 	.word	0x08007c29
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c29 	.word	0x08007c29
 8007c14:	08007c29 	.word	0x08007c29
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c29 	.word	0x08007c29
 8007c20:	08007c29 	.word	0x08007c29
 8007c24:	08007c29 	.word	0x08007c29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c28:	bf00      	nop
  }

  return (USBD_OK);
 8007c2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4805      	ldr	r0, [pc, #20]	; (8007c5c <CDC_Receive_FS+0x24>)
 8007c46:	f7fe fe6a 	bl	800691e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c4a:	4804      	ldr	r0, [pc, #16]	; (8007c5c <CDC_Receive_FS+0x24>)
 8007c4c:	f7fe fe7a 	bl	8006944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000514 	.word	0x20000514

08007c60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	6039      	str	r1, [r7, #0]
 8007c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2212      	movs	r2, #18
 8007c70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000148 	.word	0x20000148

08007c84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2204      	movs	r2, #4
 8007c94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c96:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	2000015c 	.word	0x2000015c

08007ca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4907      	ldr	r1, [pc, #28]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8007cbe:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cc0:	f7ff fe33 	bl	800792a <USBD_GetString>
 8007cc4:	e004      	b.n	8007cd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4904      	ldr	r1, [pc, #16]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ccc:	f7ff fe2d 	bl	800792a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000fa8 	.word	0x20000fa8
 8007ce0:	08009308 	.word	0x08009308

08007ce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4904      	ldr	r1, [pc, #16]	; (8007d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cf4:	4804      	ldr	r0, [pc, #16]	; (8007d08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cf6:	f7ff fe18 	bl	800792a <USBD_GetString>
  return USBD_StrDesc;
 8007cfa:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20000fa8 	.word	0x20000fa8
 8007d08:	08009320 	.word	0x08009320

08007d0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	6039      	str	r1, [r7, #0]
 8007d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	221a      	movs	r2, #26
 8007d1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d1e:	f000 f843 	bl	8007da8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d22:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000160 	.word	0x20000160

08007d30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4907      	ldr	r1, [pc, #28]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d46:	4808      	ldr	r0, [pc, #32]	; (8007d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d48:	f7ff fdef 	bl	800792a <USBD_GetString>
 8007d4c:	e004      	b.n	8007d58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4904      	ldr	r1, [pc, #16]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d52:	4805      	ldr	r0, [pc, #20]	; (8007d68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d54:	f7ff fde9 	bl	800792a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000fa8 	.word	0x20000fa8
 8007d68:	08009334 	.word	0x08009334

08007d6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4907      	ldr	r1, [pc, #28]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d82:	4808      	ldr	r0, [pc, #32]	; (8007da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d84:	f7ff fdd1 	bl	800792a <USBD_GetString>
 8007d88:	e004      	b.n	8007d94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4904      	ldr	r1, [pc, #16]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d8e:	4805      	ldr	r0, [pc, #20]	; (8007da4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d90:	f7ff fdcb 	bl	800792a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000fa8 	.word	0x20000fa8
 8007da4:	08009340 	.word	0x08009340

08007da8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <Get_SerialNum+0x44>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <Get_SerialNum+0x48>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dba:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <Get_SerialNum+0x4c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4909      	ldr	r1, [pc, #36]	; (8007df8 <Get_SerialNum+0x50>)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f814 	bl	8007e00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dd8:	2204      	movs	r2, #4
 8007dda:	4908      	ldr	r1, [pc, #32]	; (8007dfc <Get_SerialNum+0x54>)
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f000 f80f 	bl	8007e00 <IntToUnicode>
  }
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	1ffff7e8 	.word	0x1ffff7e8
 8007df0:	1ffff7ec 	.word	0x1ffff7ec
 8007df4:	1ffff7f0 	.word	0x1ffff7f0
 8007df8:	20000162 	.word	0x20000162
 8007dfc:	20000172 	.word	0x20000172

08007e00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
 8007e16:	e027      	b.n	8007e68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	0f1b      	lsrs	r3, r3, #28
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	d80b      	bhi.n	8007e38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	0f1b      	lsrs	r3, r3, #28
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	440b      	add	r3, r1
 8007e30:	3230      	adds	r2, #48	; 0x30
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e00a      	b.n	8007e4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	0f1b      	lsrs	r3, r3, #28
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	4619      	mov	r1, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	440b      	add	r3, r1
 8007e48:	3237      	adds	r2, #55	; 0x37
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	3301      	adds	r3, #1
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	3301      	adds	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]
 8007e68:	7dfa      	ldrb	r2, [r7, #23]
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d3d3      	bcc.n	8007e18 <IntToUnicode+0x18>
  }
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
	...

08007e7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <HAL_PCD_MspInit+0x44>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d113      	bne.n	8007eb6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <HAL_PCD_MspInit+0x48>)
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4a0c      	ldr	r2, [pc, #48]	; (8007ec4 <HAL_PCD_MspInit+0x48>)
 8007e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e98:	61d3      	str	r3, [r2, #28]
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <HAL_PCD_MspInit+0x48>)
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	2014      	movs	r0, #20
 8007eac:	f7f8 ff79 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007eb0:	2014      	movs	r0, #20
 8007eb2:	f7f8 ff92 	bl	8000dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40005c00 	.word	0x40005c00
 8007ec4:	40021000 	.word	0x40021000

08007ec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fe00 	bl	8006ae4 <USBD_LL_SetupStage>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	440b      	add	r3, r1
 8007f0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7fe fe30 	bl	8006b7a <USBD_LL_DataOutStage>
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	440b      	add	r3, r1
 8007f42:	333c      	adds	r3, #60	; 0x3c
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f7fe fe87 	bl	8006c5c <USBD_LL_DataInStage>
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe ff97 	bl	8006e98 <USBD_LL_SOF>
}
 8007f6a:	bf00      	nop
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d001      	beq.n	8007f8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f86:	f7f8 fb2e 	bl	80005e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f90:	7bfa      	ldrb	r2, [r7, #15]
 8007f92:	4611      	mov	r1, r2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe ff47 	bl	8006e28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe ff00 	bl	8006da6 <USBD_LL_Reset>
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe ff41 	bl	8006e46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <HAL_PCD_SuspendCallback+0x30>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a03      	ldr	r2, [pc, #12]	; (8007fe0 <HAL_PCD_SuspendCallback+0x30>)
 8007fd2:	f043 0306 	orr.w	r3, r3, #6
 8007fd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe ff3b 	bl	8006e6e <USBD_LL_Resume>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008008:	4a28      	ldr	r2, [pc, #160]	; (80080ac <USBD_LL_Init+0xac>)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a26      	ldr	r2, [pc, #152]	; (80080ac <USBD_LL_Init+0xac>)
 8008014:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008018:	4b24      	ldr	r3, [pc, #144]	; (80080ac <USBD_LL_Init+0xac>)
 800801a:	4a25      	ldr	r2, [pc, #148]	; (80080b0 <USBD_LL_Init+0xb0>)
 800801c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800801e:	4b23      	ldr	r3, [pc, #140]	; (80080ac <USBD_LL_Init+0xac>)
 8008020:	2208      	movs	r2, #8
 8008022:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008024:	4b21      	ldr	r3, [pc, #132]	; (80080ac <USBD_LL_Init+0xac>)
 8008026:	2202      	movs	r2, #2
 8008028:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800802a:	4b20      	ldr	r3, [pc, #128]	; (80080ac <USBD_LL_Init+0xac>)
 800802c:	2200      	movs	r2, #0
 800802e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008030:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <USBD_LL_Init+0xac>)
 8008032:	2200      	movs	r2, #0
 8008034:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008036:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <USBD_LL_Init+0xac>)
 8008038:	2200      	movs	r2, #0
 800803a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800803c:	481b      	ldr	r0, [pc, #108]	; (80080ac <USBD_LL_Init+0xac>)
 800803e:	f7f9 f9c1 	bl	80013c4 <HAL_PCD_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008048:	f7f8 facd 	bl	80005e6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008052:	2318      	movs	r3, #24
 8008054:	2200      	movs	r2, #0
 8008056:	2100      	movs	r1, #0
 8008058:	f7fa fcf5 	bl	8002a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008062:	2358      	movs	r3, #88	; 0x58
 8008064:	2200      	movs	r2, #0
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	f7fa fced 	bl	8002a46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008072:	23c0      	movs	r3, #192	; 0xc0
 8008074:	2200      	movs	r2, #0
 8008076:	2181      	movs	r1, #129	; 0x81
 8008078:	f7fa fce5 	bl	8002a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008082:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008086:	2200      	movs	r2, #0
 8008088:	2101      	movs	r1, #1
 800808a:	f7fa fcdc 	bl	8002a46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008098:	2200      	movs	r2, #0
 800809a:	2182      	movs	r1, #130	; 0x82
 800809c:	f7fa fcd3 	bl	8002a46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200011a8 	.word	0x200011a8
 80080b0:	40005c00 	.word	0x40005c00

080080b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f9 fa85 	bl	80015da <HAL_PCD_Start>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f94e 	bl	8008378 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	461a      	mov	r2, r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	70fb      	strb	r3, [r7, #3]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70bb      	strb	r3, [r7, #2]
 8008100:	4613      	mov	r3, r2
 8008102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008112:	78bb      	ldrb	r3, [r7, #2]
 8008114:	883a      	ldrh	r2, [r7, #0]
 8008116:	78f9      	ldrb	r1, [r7, #3]
 8008118:	f7f9 fbff 	bl	800191a <HAL_PCD_EP_Open>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f928 	bl	8008378 <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812c:	7bbb      	ldrb	r3, [r7, #14]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7f9 fc46 	bl	80019e6 <HAL_PCD_EP_Close>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f909 	bl	8008378 <USBD_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7f9 fd06 	bl	8001ba4 <HAL_PCD_EP_SetStall>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f8ea 	bl	8008378 <USBD_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f9 fd47 	bl	8001c64 <HAL_PCD_EP_ClrStall>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f8cb 	bl	8008378 <USBD_Get_USB_Status>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008202:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da0c      	bge.n	8008226 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	440b      	add	r3, r1
 8008220:	3302      	adds	r3, #2
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	e00b      	b.n	800823e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822c:	68f9      	ldr	r1, [r7, #12]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	440b      	add	r3, r1
 8008238:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800823c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 fb32 	bl	80018d0 <HAL_PCD_SetAddress>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f880 	bl	8008378 <USBD_Get_USB_Status>
 8008278:	4603      	mov	r3, r0
 800827a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800827c:	7bbb      	ldrb	r3, [r7, #14]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	461a      	mov	r2, r3
 8008292:	460b      	mov	r3, r1
 8008294:	72fb      	strb	r3, [r7, #11]
 8008296:	4613      	mov	r3, r2
 8008298:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082a8:	893b      	ldrh	r3, [r7, #8]
 80082aa:	7af9      	ldrb	r1, [r7, #11]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f7f9 fc36 	bl	8001b1e <HAL_PCD_EP_Transmit>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f85d 	bl	8008378 <USBD_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	461a      	mov	r2, r3
 80082d8:	460b      	mov	r3, r1
 80082da:	72fb      	strb	r3, [r7, #11]
 80082dc:	4613      	mov	r3, r2
 80082de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082ee:	893b      	ldrh	r3, [r7, #8]
 80082f0:	7af9      	ldrb	r1, [r7, #11]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	f7f9 fbbf 	bl	8001a76 <HAL_PCD_EP_Receive>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f83a 	bl	8008378 <USBD_Get_USB_Status>
 8008304:	4603      	mov	r3, r0
 8008306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008308:	7dbb      	ldrb	r3, [r7, #22]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7f9 fbe1 	bl	8001af0 <HAL_PCD_EP_GetRxCount>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <USBD_static_malloc+0x14>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	20000204 	.word	0x20000204

08008350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d817      	bhi.n	80083bc <USBD_Get_USB_Status+0x44>
 800838c:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <USBD_Get_USB_Status+0x1c>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083ab 	.word	0x080083ab
 800839c:	080083b1 	.word	0x080083b1
 80083a0:	080083b7 	.word	0x080083b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e00b      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e008      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	e005      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083b6:	2302      	movs	r3, #2
 80083b8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ba:	e002      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083bc:	2302      	movs	r3, #2
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	bf00      	nop
  }
  return usb_status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <__errno>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <__errno+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000017c 	.word	0x2000017c

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	2500      	movs	r5, #0
 80083e0:	4e0c      	ldr	r6, [pc, #48]	; (8008414 <__libc_init_array+0x38>)
 80083e2:	4c0d      	ldr	r4, [pc, #52]	; (8008418 <__libc_init_array+0x3c>)
 80083e4:	1ba4      	subs	r4, r4, r6
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	42a5      	cmp	r5, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	f000 ff5a 	bl	80092a4 <_init>
 80083f0:	2500      	movs	r5, #0
 80083f2:	4e0a      	ldr	r6, [pc, #40]	; (800841c <__libc_init_array+0x40>)
 80083f4:	4c0a      	ldr	r4, [pc, #40]	; (8008420 <__libc_init_array+0x44>)
 80083f6:	1ba4      	subs	r4, r4, r6
 80083f8:	10a4      	asrs	r4, r4, #2
 80083fa:	42a5      	cmp	r5, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008404:	4798      	blx	r3
 8008406:	3501      	adds	r5, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800840e:	4798      	blx	r3
 8008410:	3501      	adds	r5, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	08009400 	.word	0x08009400
 8008418:	08009400 	.word	0x08009400
 800841c:	08009400 	.word	0x08009400
 8008420:	08009404 	.word	0x08009404

08008424 <memset>:
 8008424:	4603      	mov	r3, r0
 8008426:	4402      	add	r2, r0
 8008428:	4293      	cmp	r3, r2
 800842a:	d100      	bne.n	800842e <memset+0xa>
 800842c:	4770      	bx	lr
 800842e:	f803 1b01 	strb.w	r1, [r3], #1
 8008432:	e7f9      	b.n	8008428 <memset+0x4>

08008434 <iprintf>:
 8008434:	b40f      	push	{r0, r1, r2, r3}
 8008436:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <iprintf+0x2c>)
 8008438:	b513      	push	{r0, r1, r4, lr}
 800843a:	681c      	ldr	r4, [r3, #0]
 800843c:	b124      	cbz	r4, 8008448 <iprintf+0x14>
 800843e:	69a3      	ldr	r3, [r4, #24]
 8008440:	b913      	cbnz	r3, 8008448 <iprintf+0x14>
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f862 	bl	800850c <__sinit>
 8008448:	ab05      	add	r3, sp, #20
 800844a:	9a04      	ldr	r2, [sp, #16]
 800844c:	68a1      	ldr	r1, [r4, #8]
 800844e:	4620      	mov	r0, r4
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	f000 f967 	bl	8008724 <_vfiprintf_r>
 8008456:	b002      	add	sp, #8
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	b004      	add	sp, #16
 800845e:	4770      	bx	lr
 8008460:	2000017c 	.word	0x2000017c

08008464 <putchar>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <putchar+0x24>)
 8008468:	4605      	mov	r5, r0
 800846a:	681c      	ldr	r4, [r3, #0]
 800846c:	b124      	cbz	r4, 8008478 <putchar+0x14>
 800846e:	69a3      	ldr	r3, [r4, #24]
 8008470:	b913      	cbnz	r3, 8008478 <putchar+0x14>
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f84a 	bl	800850c <__sinit>
 8008478:	68a2      	ldr	r2, [r4, #8]
 800847a:	4629      	mov	r1, r5
 800847c:	4620      	mov	r0, r4
 800847e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008482:	f000 bbed 	b.w	8008c60 <_putc_r>
 8008486:	bf00      	nop
 8008488:	2000017c 	.word	0x2000017c

0800848c <std>:
 800848c:	2300      	movs	r3, #0
 800848e:	b510      	push	{r4, lr}
 8008490:	4604      	mov	r4, r0
 8008492:	e9c0 3300 	strd	r3, r3, [r0]
 8008496:	6083      	str	r3, [r0, #8]
 8008498:	8181      	strh	r1, [r0, #12]
 800849a:	6643      	str	r3, [r0, #100]	; 0x64
 800849c:	81c2      	strh	r2, [r0, #14]
 800849e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a2:	6183      	str	r3, [r0, #24]
 80084a4:	4619      	mov	r1, r3
 80084a6:	2208      	movs	r2, #8
 80084a8:	305c      	adds	r0, #92	; 0x5c
 80084aa:	f7ff ffbb 	bl	8008424 <memset>
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <std+0x38>)
 80084b0:	6224      	str	r4, [r4, #32]
 80084b2:	6263      	str	r3, [r4, #36]	; 0x24
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <std+0x3c>)
 80084b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084b8:	4b04      	ldr	r3, [pc, #16]	; (80084cc <std+0x40>)
 80084ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084bc:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <std+0x44>)
 80084be:	6323      	str	r3, [r4, #48]	; 0x30
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	bf00      	nop
 80084c4:	08008ced 	.word	0x08008ced
 80084c8:	08008d0f 	.word	0x08008d0f
 80084cc:	08008d47 	.word	0x08008d47
 80084d0:	08008d6b 	.word	0x08008d6b

080084d4 <_cleanup_r>:
 80084d4:	4901      	ldr	r1, [pc, #4]	; (80084dc <_cleanup_r+0x8>)
 80084d6:	f000 b885 	b.w	80085e4 <_fwalk_reent>
 80084da:	bf00      	nop
 80084dc:	08009045 	.word	0x08009045

080084e0 <__sfmoreglue>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	2568      	movs	r5, #104	; 0x68
 80084e4:	1e4a      	subs	r2, r1, #1
 80084e6:	4355      	muls	r5, r2
 80084e8:	460e      	mov	r6, r1
 80084ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084ee:	f000 f897 	bl	8008620 <_malloc_r>
 80084f2:	4604      	mov	r4, r0
 80084f4:	b140      	cbz	r0, 8008508 <__sfmoreglue+0x28>
 80084f6:	2100      	movs	r1, #0
 80084f8:	e9c0 1600 	strd	r1, r6, [r0]
 80084fc:	300c      	adds	r0, #12
 80084fe:	60a0      	str	r0, [r4, #8]
 8008500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008504:	f7ff ff8e 	bl	8008424 <memset>
 8008508:	4620      	mov	r0, r4
 800850a:	bd70      	pop	{r4, r5, r6, pc}

0800850c <__sinit>:
 800850c:	6983      	ldr	r3, [r0, #24]
 800850e:	b510      	push	{r4, lr}
 8008510:	4604      	mov	r4, r0
 8008512:	bb33      	cbnz	r3, 8008562 <__sinit+0x56>
 8008514:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008518:	6503      	str	r3, [r0, #80]	; 0x50
 800851a:	4b12      	ldr	r3, [pc, #72]	; (8008564 <__sinit+0x58>)
 800851c:	4a12      	ldr	r2, [pc, #72]	; (8008568 <__sinit+0x5c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6282      	str	r2, [r0, #40]	; 0x28
 8008522:	4298      	cmp	r0, r3
 8008524:	bf04      	itt	eq
 8008526:	2301      	moveq	r3, #1
 8008528:	6183      	streq	r3, [r0, #24]
 800852a:	f000 f81f 	bl	800856c <__sfp>
 800852e:	6060      	str	r0, [r4, #4]
 8008530:	4620      	mov	r0, r4
 8008532:	f000 f81b 	bl	800856c <__sfp>
 8008536:	60a0      	str	r0, [r4, #8]
 8008538:	4620      	mov	r0, r4
 800853a:	f000 f817 	bl	800856c <__sfp>
 800853e:	2200      	movs	r2, #0
 8008540:	60e0      	str	r0, [r4, #12]
 8008542:	2104      	movs	r1, #4
 8008544:	6860      	ldr	r0, [r4, #4]
 8008546:	f7ff ffa1 	bl	800848c <std>
 800854a:	2201      	movs	r2, #1
 800854c:	2109      	movs	r1, #9
 800854e:	68a0      	ldr	r0, [r4, #8]
 8008550:	f7ff ff9c 	bl	800848c <std>
 8008554:	2202      	movs	r2, #2
 8008556:	2112      	movs	r1, #18
 8008558:	68e0      	ldr	r0, [r4, #12]
 800855a:	f7ff ff97 	bl	800848c <std>
 800855e:	2301      	movs	r3, #1
 8008560:	61a3      	str	r3, [r4, #24]
 8008562:	bd10      	pop	{r4, pc}
 8008564:	08009368 	.word	0x08009368
 8008568:	080084d5 	.word	0x080084d5

0800856c <__sfp>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <__sfp+0x70>)
 8008570:	4607      	mov	r7, r0
 8008572:	681e      	ldr	r6, [r3, #0]
 8008574:	69b3      	ldr	r3, [r6, #24]
 8008576:	b913      	cbnz	r3, 800857e <__sfp+0x12>
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff ffc7 	bl	800850c <__sinit>
 800857e:	3648      	adds	r6, #72	; 0x48
 8008580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008584:	3b01      	subs	r3, #1
 8008586:	d503      	bpl.n	8008590 <__sfp+0x24>
 8008588:	6833      	ldr	r3, [r6, #0]
 800858a:	b133      	cbz	r3, 800859a <__sfp+0x2e>
 800858c:	6836      	ldr	r6, [r6, #0]
 800858e:	e7f7      	b.n	8008580 <__sfp+0x14>
 8008590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008594:	b16d      	cbz	r5, 80085b2 <__sfp+0x46>
 8008596:	3468      	adds	r4, #104	; 0x68
 8008598:	e7f4      	b.n	8008584 <__sfp+0x18>
 800859a:	2104      	movs	r1, #4
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ff9f 	bl	80084e0 <__sfmoreglue>
 80085a2:	6030      	str	r0, [r6, #0]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d1f1      	bne.n	800858c <__sfp+0x20>
 80085a8:	230c      	movs	r3, #12
 80085aa:	4604      	mov	r4, r0
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4620      	mov	r0, r4
 80085b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b2:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <__sfp+0x74>)
 80085b4:	6665      	str	r5, [r4, #100]	; 0x64
 80085b6:	e9c4 5500 	strd	r5, r5, [r4]
 80085ba:	60a5      	str	r5, [r4, #8]
 80085bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80085c4:	2208      	movs	r2, #8
 80085c6:	4629      	mov	r1, r5
 80085c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085cc:	f7ff ff2a 	bl	8008424 <memset>
 80085d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085d8:	e7e9      	b.n	80085ae <__sfp+0x42>
 80085da:	bf00      	nop
 80085dc:	08009368 	.word	0x08009368
 80085e0:	ffff0001 	.word	0xffff0001

080085e4 <_fwalk_reent>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	4680      	mov	r8, r0
 80085ea:	4689      	mov	r9, r1
 80085ec:	2600      	movs	r6, #0
 80085ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085f2:	b914      	cbnz	r4, 80085fa <_fwalk_reent+0x16>
 80085f4:	4630      	mov	r0, r6
 80085f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80085fe:	3f01      	subs	r7, #1
 8008600:	d501      	bpl.n	8008606 <_fwalk_reent+0x22>
 8008602:	6824      	ldr	r4, [r4, #0]
 8008604:	e7f5      	b.n	80085f2 <_fwalk_reent+0xe>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d907      	bls.n	800861c <_fwalk_reent+0x38>
 800860c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008610:	3301      	adds	r3, #1
 8008612:	d003      	beq.n	800861c <_fwalk_reent+0x38>
 8008614:	4629      	mov	r1, r5
 8008616:	4640      	mov	r0, r8
 8008618:	47c8      	blx	r9
 800861a:	4306      	orrs	r6, r0
 800861c:	3568      	adds	r5, #104	; 0x68
 800861e:	e7ee      	b.n	80085fe <_fwalk_reent+0x1a>

08008620 <_malloc_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	1ccd      	adds	r5, r1, #3
 8008624:	f025 0503 	bic.w	r5, r5, #3
 8008628:	3508      	adds	r5, #8
 800862a:	2d0c      	cmp	r5, #12
 800862c:	bf38      	it	cc
 800862e:	250c      	movcc	r5, #12
 8008630:	2d00      	cmp	r5, #0
 8008632:	4606      	mov	r6, r0
 8008634:	db01      	blt.n	800863a <_malloc_r+0x1a>
 8008636:	42a9      	cmp	r1, r5
 8008638:	d903      	bls.n	8008642 <_malloc_r+0x22>
 800863a:	230c      	movs	r3, #12
 800863c:	6033      	str	r3, [r6, #0]
 800863e:	2000      	movs	r0, #0
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	f000 fdad 	bl	80091a0 <__malloc_lock>
 8008646:	4a21      	ldr	r2, [pc, #132]	; (80086cc <_malloc_r+0xac>)
 8008648:	6814      	ldr	r4, [r2, #0]
 800864a:	4621      	mov	r1, r4
 800864c:	b991      	cbnz	r1, 8008674 <_malloc_r+0x54>
 800864e:	4c20      	ldr	r4, [pc, #128]	; (80086d0 <_malloc_r+0xb0>)
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	b91b      	cbnz	r3, 800865c <_malloc_r+0x3c>
 8008654:	4630      	mov	r0, r6
 8008656:	f000 fb39 	bl	8008ccc <_sbrk_r>
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	4629      	mov	r1, r5
 800865e:	4630      	mov	r0, r6
 8008660:	f000 fb34 	bl	8008ccc <_sbrk_r>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d124      	bne.n	80086b2 <_malloc_r+0x92>
 8008668:	230c      	movs	r3, #12
 800866a:	4630      	mov	r0, r6
 800866c:	6033      	str	r3, [r6, #0]
 800866e:	f000 fd98 	bl	80091a2 <__malloc_unlock>
 8008672:	e7e4      	b.n	800863e <_malloc_r+0x1e>
 8008674:	680b      	ldr	r3, [r1, #0]
 8008676:	1b5b      	subs	r3, r3, r5
 8008678:	d418      	bmi.n	80086ac <_malloc_r+0x8c>
 800867a:	2b0b      	cmp	r3, #11
 800867c:	d90f      	bls.n	800869e <_malloc_r+0x7e>
 800867e:	600b      	str	r3, [r1, #0]
 8008680:	18cc      	adds	r4, r1, r3
 8008682:	50cd      	str	r5, [r1, r3]
 8008684:	4630      	mov	r0, r6
 8008686:	f000 fd8c 	bl	80091a2 <__malloc_unlock>
 800868a:	f104 000b 	add.w	r0, r4, #11
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	f020 0007 	bic.w	r0, r0, #7
 8008694:	1ac3      	subs	r3, r0, r3
 8008696:	d0d3      	beq.n	8008640 <_malloc_r+0x20>
 8008698:	425a      	negs	r2, r3
 800869a:	50e2      	str	r2, [r4, r3]
 800869c:	e7d0      	b.n	8008640 <_malloc_r+0x20>
 800869e:	684b      	ldr	r3, [r1, #4]
 80086a0:	428c      	cmp	r4, r1
 80086a2:	bf16      	itet	ne
 80086a4:	6063      	strne	r3, [r4, #4]
 80086a6:	6013      	streq	r3, [r2, #0]
 80086a8:	460c      	movne	r4, r1
 80086aa:	e7eb      	b.n	8008684 <_malloc_r+0x64>
 80086ac:	460c      	mov	r4, r1
 80086ae:	6849      	ldr	r1, [r1, #4]
 80086b0:	e7cc      	b.n	800864c <_malloc_r+0x2c>
 80086b2:	1cc4      	adds	r4, r0, #3
 80086b4:	f024 0403 	bic.w	r4, r4, #3
 80086b8:	42a0      	cmp	r0, r4
 80086ba:	d005      	beq.n	80086c8 <_malloc_r+0xa8>
 80086bc:	1a21      	subs	r1, r4, r0
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 fb04 	bl	8008ccc <_sbrk_r>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0cf      	beq.n	8008668 <_malloc_r+0x48>
 80086c8:	6025      	str	r5, [r4, #0]
 80086ca:	e7db      	b.n	8008684 <_malloc_r+0x64>
 80086cc:	20000424 	.word	0x20000424
 80086d0:	20000428 	.word	0x20000428

080086d4 <__sfputc_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	b410      	push	{r4}
 80086d8:	3b01      	subs	r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	6093      	str	r3, [r2, #8]
 80086de:	da07      	bge.n	80086f0 <__sfputc_r+0x1c>
 80086e0:	6994      	ldr	r4, [r2, #24]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db01      	blt.n	80086ea <__sfputc_r+0x16>
 80086e6:	290a      	cmp	r1, #10
 80086e8:	d102      	bne.n	80086f0 <__sfputc_r+0x1c>
 80086ea:	bc10      	pop	{r4}
 80086ec:	f000 bb42 	b.w	8008d74 <__swbuf_r>
 80086f0:	6813      	ldr	r3, [r2, #0]
 80086f2:	1c58      	adds	r0, r3, #1
 80086f4:	6010      	str	r0, [r2, #0]
 80086f6:	7019      	strb	r1, [r3, #0]
 80086f8:	4608      	mov	r0, r1
 80086fa:	bc10      	pop	{r4}
 80086fc:	4770      	bx	lr

080086fe <__sfputs_r>:
 80086fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008700:	4606      	mov	r6, r0
 8008702:	460f      	mov	r7, r1
 8008704:	4614      	mov	r4, r2
 8008706:	18d5      	adds	r5, r2, r3
 8008708:	42ac      	cmp	r4, r5
 800870a:	d101      	bne.n	8008710 <__sfputs_r+0x12>
 800870c:	2000      	movs	r0, #0
 800870e:	e007      	b.n	8008720 <__sfputs_r+0x22>
 8008710:	463a      	mov	r2, r7
 8008712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ffdc 	bl	80086d4 <__sfputc_r>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d1f3      	bne.n	8008708 <__sfputs_r+0xa>
 8008720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008724 <_vfiprintf_r>:
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	b09d      	sub	sp, #116	; 0x74
 800872c:	4617      	mov	r7, r2
 800872e:	461d      	mov	r5, r3
 8008730:	4606      	mov	r6, r0
 8008732:	b118      	cbz	r0, 800873c <_vfiprintf_r+0x18>
 8008734:	6983      	ldr	r3, [r0, #24]
 8008736:	b90b      	cbnz	r3, 800873c <_vfiprintf_r+0x18>
 8008738:	f7ff fee8 	bl	800850c <__sinit>
 800873c:	4b7c      	ldr	r3, [pc, #496]	; (8008930 <_vfiprintf_r+0x20c>)
 800873e:	429c      	cmp	r4, r3
 8008740:	d158      	bne.n	80087f4 <_vfiprintf_r+0xd0>
 8008742:	6874      	ldr	r4, [r6, #4]
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	0718      	lsls	r0, r3, #28
 8008748:	d55e      	bpl.n	8008808 <_vfiprintf_r+0xe4>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d05b      	beq.n	8008808 <_vfiprintf_r+0xe4>
 8008750:	2300      	movs	r3, #0
 8008752:	9309      	str	r3, [sp, #36]	; 0x24
 8008754:	2320      	movs	r3, #32
 8008756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800875a:	2330      	movs	r3, #48	; 0x30
 800875c:	f04f 0b01 	mov.w	fp, #1
 8008760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008764:	9503      	str	r5, [sp, #12]
 8008766:	46b8      	mov	r8, r7
 8008768:	4645      	mov	r5, r8
 800876a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800876e:	b10b      	cbz	r3, 8008774 <_vfiprintf_r+0x50>
 8008770:	2b25      	cmp	r3, #37	; 0x25
 8008772:	d154      	bne.n	800881e <_vfiprintf_r+0xfa>
 8008774:	ebb8 0a07 	subs.w	sl, r8, r7
 8008778:	d00b      	beq.n	8008792 <_vfiprintf_r+0x6e>
 800877a:	4653      	mov	r3, sl
 800877c:	463a      	mov	r2, r7
 800877e:	4621      	mov	r1, r4
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff ffbc 	bl	80086fe <__sfputs_r>
 8008786:	3001      	adds	r0, #1
 8008788:	f000 80c2 	beq.w	8008910 <_vfiprintf_r+0x1ec>
 800878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878e:	4453      	add	r3, sl
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	f898 3000 	ldrb.w	r3, [r8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80ba 	beq.w	8008910 <_vfiprintf_r+0x1ec>
 800879c:	2300      	movs	r3, #0
 800879e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	9307      	str	r3, [sp, #28]
 80087aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ae:	931a      	str	r3, [sp, #104]	; 0x68
 80087b0:	46a8      	mov	r8, r5
 80087b2:	2205      	movs	r2, #5
 80087b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80087b8:	485e      	ldr	r0, [pc, #376]	; (8008934 <_vfiprintf_r+0x210>)
 80087ba:	f000 fce3 	bl	8009184 <memchr>
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	bb78      	cbnz	r0, 8008822 <_vfiprintf_r+0xfe>
 80087c2:	06d9      	lsls	r1, r3, #27
 80087c4:	bf44      	itt	mi
 80087c6:	2220      	movmi	r2, #32
 80087c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087cc:	071a      	lsls	r2, r3, #28
 80087ce:	bf44      	itt	mi
 80087d0:	222b      	movmi	r2, #43	; 0x2b
 80087d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087d6:	782a      	ldrb	r2, [r5, #0]
 80087d8:	2a2a      	cmp	r2, #42	; 0x2a
 80087da:	d02a      	beq.n	8008832 <_vfiprintf_r+0x10e>
 80087dc:	46a8      	mov	r8, r5
 80087de:	2000      	movs	r0, #0
 80087e0:	250a      	movs	r5, #10
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	4641      	mov	r1, r8
 80087e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ea:	3b30      	subs	r3, #48	; 0x30
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d969      	bls.n	80088c4 <_vfiprintf_r+0x1a0>
 80087f0:	b360      	cbz	r0, 800884c <_vfiprintf_r+0x128>
 80087f2:	e024      	b.n	800883e <_vfiprintf_r+0x11a>
 80087f4:	4b50      	ldr	r3, [pc, #320]	; (8008938 <_vfiprintf_r+0x214>)
 80087f6:	429c      	cmp	r4, r3
 80087f8:	d101      	bne.n	80087fe <_vfiprintf_r+0xda>
 80087fa:	68b4      	ldr	r4, [r6, #8]
 80087fc:	e7a2      	b.n	8008744 <_vfiprintf_r+0x20>
 80087fe:	4b4f      	ldr	r3, [pc, #316]	; (800893c <_vfiprintf_r+0x218>)
 8008800:	429c      	cmp	r4, r3
 8008802:	bf08      	it	eq
 8008804:	68f4      	ldreq	r4, [r6, #12]
 8008806:	e79d      	b.n	8008744 <_vfiprintf_r+0x20>
 8008808:	4621      	mov	r1, r4
 800880a:	4630      	mov	r0, r6
 800880c:	f000 fb16 	bl	8008e3c <__swsetup_r>
 8008810:	2800      	cmp	r0, #0
 8008812:	d09d      	beq.n	8008750 <_vfiprintf_r+0x2c>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008818:	b01d      	add	sp, #116	; 0x74
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	46a8      	mov	r8, r5
 8008820:	e7a2      	b.n	8008768 <_vfiprintf_r+0x44>
 8008822:	4a44      	ldr	r2, [pc, #272]	; (8008934 <_vfiprintf_r+0x210>)
 8008824:	4645      	mov	r5, r8
 8008826:	1a80      	subs	r0, r0, r2
 8008828:	fa0b f000 	lsl.w	r0, fp, r0
 800882c:	4318      	orrs	r0, r3
 800882e:	9004      	str	r0, [sp, #16]
 8008830:	e7be      	b.n	80087b0 <_vfiprintf_r+0x8c>
 8008832:	9a03      	ldr	r2, [sp, #12]
 8008834:	1d11      	adds	r1, r2, #4
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	9103      	str	r1, [sp, #12]
 800883a:	2a00      	cmp	r2, #0
 800883c:	db01      	blt.n	8008842 <_vfiprintf_r+0x11e>
 800883e:	9207      	str	r2, [sp, #28]
 8008840:	e004      	b.n	800884c <_vfiprintf_r+0x128>
 8008842:	4252      	negs	r2, r2
 8008844:	f043 0302 	orr.w	r3, r3, #2
 8008848:	9207      	str	r2, [sp, #28]
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	f898 3000 	ldrb.w	r3, [r8]
 8008850:	2b2e      	cmp	r3, #46	; 0x2e
 8008852:	d10e      	bne.n	8008872 <_vfiprintf_r+0x14e>
 8008854:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008858:	2b2a      	cmp	r3, #42	; 0x2a
 800885a:	d138      	bne.n	80088ce <_vfiprintf_r+0x1aa>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	f108 0802 	add.w	r8, r8, #2
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	9203      	str	r2, [sp, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfb8      	it	lt
 800886c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	4d33      	ldr	r5, [pc, #204]	; (8008940 <_vfiprintf_r+0x21c>)
 8008874:	2203      	movs	r2, #3
 8008876:	f898 1000 	ldrb.w	r1, [r8]
 800887a:	4628      	mov	r0, r5
 800887c:	f000 fc82 	bl	8009184 <memchr>
 8008880:	b140      	cbz	r0, 8008894 <_vfiprintf_r+0x170>
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	1b40      	subs	r0, r0, r5
 8008886:	fa03 f000 	lsl.w	r0, r3, r0
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	f108 0801 	add.w	r8, r8, #1
 8008890:	4303      	orrs	r3, r0
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	f898 1000 	ldrb.w	r1, [r8]
 8008898:	2206      	movs	r2, #6
 800889a:	482a      	ldr	r0, [pc, #168]	; (8008944 <_vfiprintf_r+0x220>)
 800889c:	f108 0701 	add.w	r7, r8, #1
 80088a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a4:	f000 fc6e 	bl	8009184 <memchr>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d037      	beq.n	800891c <_vfiprintf_r+0x1f8>
 80088ac:	4b26      	ldr	r3, [pc, #152]	; (8008948 <_vfiprintf_r+0x224>)
 80088ae:	bb1b      	cbnz	r3, 80088f8 <_vfiprintf_r+0x1d4>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	3307      	adds	r3, #7
 80088b4:	f023 0307 	bic.w	r3, r3, #7
 80088b8:	3308      	adds	r3, #8
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	444b      	add	r3, r9
 80088c0:	9309      	str	r3, [sp, #36]	; 0x24
 80088c2:	e750      	b.n	8008766 <_vfiprintf_r+0x42>
 80088c4:	fb05 3202 	mla	r2, r5, r2, r3
 80088c8:	2001      	movs	r0, #1
 80088ca:	4688      	mov	r8, r1
 80088cc:	e78a      	b.n	80087e4 <_vfiprintf_r+0xc0>
 80088ce:	2300      	movs	r3, #0
 80088d0:	250a      	movs	r5, #10
 80088d2:	4619      	mov	r1, r3
 80088d4:	f108 0801 	add.w	r8, r8, #1
 80088d8:	9305      	str	r3, [sp, #20]
 80088da:	4640      	mov	r0, r8
 80088dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e0:	3a30      	subs	r2, #48	; 0x30
 80088e2:	2a09      	cmp	r2, #9
 80088e4:	d903      	bls.n	80088ee <_vfiprintf_r+0x1ca>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0c3      	beq.n	8008872 <_vfiprintf_r+0x14e>
 80088ea:	9105      	str	r1, [sp, #20]
 80088ec:	e7c1      	b.n	8008872 <_vfiprintf_r+0x14e>
 80088ee:	fb05 2101 	mla	r1, r5, r1, r2
 80088f2:	2301      	movs	r3, #1
 80088f4:	4680      	mov	r8, r0
 80088f6:	e7f0      	b.n	80088da <_vfiprintf_r+0x1b6>
 80088f8:	ab03      	add	r3, sp, #12
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4622      	mov	r2, r4
 80088fe:	4b13      	ldr	r3, [pc, #76]	; (800894c <_vfiprintf_r+0x228>)
 8008900:	a904      	add	r1, sp, #16
 8008902:	4630      	mov	r0, r6
 8008904:	f3af 8000 	nop.w
 8008908:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800890c:	4681      	mov	r9, r0
 800890e:	d1d5      	bne.n	80088bc <_vfiprintf_r+0x198>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	065b      	lsls	r3, r3, #25
 8008914:	f53f af7e 	bmi.w	8008814 <_vfiprintf_r+0xf0>
 8008918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800891a:	e77d      	b.n	8008818 <_vfiprintf_r+0xf4>
 800891c:	ab03      	add	r3, sp, #12
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4622      	mov	r2, r4
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <_vfiprintf_r+0x228>)
 8008924:	a904      	add	r1, sp, #16
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f888 	bl	8008a3c <_printf_i>
 800892c:	e7ec      	b.n	8008908 <_vfiprintf_r+0x1e4>
 800892e:	bf00      	nop
 8008930:	0800938c 	.word	0x0800938c
 8008934:	080093cc 	.word	0x080093cc
 8008938:	080093ac 	.word	0x080093ac
 800893c:	0800936c 	.word	0x0800936c
 8008940:	080093d2 	.word	0x080093d2
 8008944:	080093d6 	.word	0x080093d6
 8008948:	00000000 	.word	0x00000000
 800894c:	080086ff 	.word	0x080086ff

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4691      	mov	r9, r2
 8008956:	461f      	mov	r7, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	4606      	mov	r6, r0
 800895e:	4293      	cmp	r3, r2
 8008960:	bfb8      	it	lt
 8008962:	4613      	movlt	r3, r2
 8008964:	f8c9 3000 	str.w	r3, [r9]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800896c:	460c      	mov	r4, r1
 800896e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008972:	b112      	cbz	r2, 800897a <_printf_common+0x2a>
 8008974:	3301      	adds	r3, #1
 8008976:	f8c9 3000 	str.w	r3, [r9]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	0699      	lsls	r1, r3, #26
 800897e:	bf42      	ittt	mi
 8008980:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008984:	3302      	addmi	r3, #2
 8008986:	f8c9 3000 	strmi.w	r3, [r9]
 800898a:	6825      	ldr	r5, [r4, #0]
 800898c:	f015 0506 	ands.w	r5, r5, #6
 8008990:	d107      	bne.n	80089a2 <_printf_common+0x52>
 8008992:	f104 0a19 	add.w	sl, r4, #25
 8008996:	68e3      	ldr	r3, [r4, #12]
 8008998:	f8d9 2000 	ldr.w	r2, [r9]
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	42ab      	cmp	r3, r5
 80089a0:	dc29      	bgt.n	80089f6 <_printf_common+0xa6>
 80089a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	3300      	adds	r3, #0
 80089aa:	bf18      	it	ne
 80089ac:	2301      	movne	r3, #1
 80089ae:	0692      	lsls	r2, r2, #26
 80089b0:	d42e      	bmi.n	8008a10 <_printf_common+0xc0>
 80089b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089b6:	4639      	mov	r1, r7
 80089b8:	4630      	mov	r0, r6
 80089ba:	47c0      	blx	r8
 80089bc:	3001      	adds	r0, #1
 80089be:	d021      	beq.n	8008a04 <_printf_common+0xb4>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	68e5      	ldr	r5, [r4, #12]
 80089c4:	f003 0306 	and.w	r3, r3, #6
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	bf18      	it	ne
 80089cc:	2500      	movne	r5, #0
 80089ce:	f8d9 2000 	ldr.w	r2, [r9]
 80089d2:	f04f 0900 	mov.w	r9, #0
 80089d6:	bf08      	it	eq
 80089d8:	1aad      	subeq	r5, r5, r2
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	6922      	ldr	r2, [r4, #16]
 80089de:	bf08      	it	eq
 80089e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e4:	4293      	cmp	r3, r2
 80089e6:	bfc4      	itt	gt
 80089e8:	1a9b      	subgt	r3, r3, r2
 80089ea:	18ed      	addgt	r5, r5, r3
 80089ec:	341a      	adds	r4, #26
 80089ee:	454d      	cmp	r5, r9
 80089f0:	d11a      	bne.n	8008a28 <_printf_common+0xd8>
 80089f2:	2000      	movs	r0, #0
 80089f4:	e008      	b.n	8008a08 <_printf_common+0xb8>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4652      	mov	r2, sl
 80089fa:	4639      	mov	r1, r7
 80089fc:	4630      	mov	r0, r6
 80089fe:	47c0      	blx	r8
 8008a00:	3001      	adds	r0, #1
 8008a02:	d103      	bne.n	8008a0c <_printf_common+0xbc>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	e7c2      	b.n	8008996 <_printf_common+0x46>
 8008a10:	2030      	movs	r0, #48	; 0x30
 8008a12:	18e1      	adds	r1, r4, r3
 8008a14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a1e:	4422      	add	r2, r4
 8008a20:	3302      	adds	r3, #2
 8008a22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a26:	e7c4      	b.n	80089b2 <_printf_common+0x62>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4630      	mov	r0, r6
 8008a30:	47c0      	blx	r8
 8008a32:	3001      	adds	r0, #1
 8008a34:	d0e6      	beq.n	8008a04 <_printf_common+0xb4>
 8008a36:	f109 0901 	add.w	r9, r9, #1
 8008a3a:	e7d8      	b.n	80089ee <_printf_common+0x9e>

08008a3c <_printf_i>:
 8008a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a44:	460c      	mov	r4, r1
 8008a46:	7e09      	ldrb	r1, [r1, #24]
 8008a48:	b085      	sub	sp, #20
 8008a4a:	296e      	cmp	r1, #110	; 0x6e
 8008a4c:	4617      	mov	r7, r2
 8008a4e:	4606      	mov	r6, r0
 8008a50:	4698      	mov	r8, r3
 8008a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a54:	f000 80b3 	beq.w	8008bbe <_printf_i+0x182>
 8008a58:	d822      	bhi.n	8008aa0 <_printf_i+0x64>
 8008a5a:	2963      	cmp	r1, #99	; 0x63
 8008a5c:	d036      	beq.n	8008acc <_printf_i+0x90>
 8008a5e:	d80a      	bhi.n	8008a76 <_printf_i+0x3a>
 8008a60:	2900      	cmp	r1, #0
 8008a62:	f000 80b9 	beq.w	8008bd8 <_printf_i+0x19c>
 8008a66:	2958      	cmp	r1, #88	; 0x58
 8008a68:	f000 8083 	beq.w	8008b72 <_printf_i+0x136>
 8008a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a74:	e032      	b.n	8008adc <_printf_i+0xa0>
 8008a76:	2964      	cmp	r1, #100	; 0x64
 8008a78:	d001      	beq.n	8008a7e <_printf_i+0x42>
 8008a7a:	2969      	cmp	r1, #105	; 0x69
 8008a7c:	d1f6      	bne.n	8008a6c <_printf_i+0x30>
 8008a7e:	6820      	ldr	r0, [r4, #0]
 8008a80:	6813      	ldr	r3, [r2, #0]
 8008a82:	0605      	lsls	r5, r0, #24
 8008a84:	f103 0104 	add.w	r1, r3, #4
 8008a88:	d52a      	bpl.n	8008ae0 <_printf_i+0xa4>
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6011      	str	r1, [r2, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da03      	bge.n	8008a9a <_printf_i+0x5e>
 8008a92:	222d      	movs	r2, #45	; 0x2d
 8008a94:	425b      	negs	r3, r3
 8008a96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a9a:	486f      	ldr	r0, [pc, #444]	; (8008c58 <_printf_i+0x21c>)
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	e039      	b.n	8008b14 <_printf_i+0xd8>
 8008aa0:	2973      	cmp	r1, #115	; 0x73
 8008aa2:	f000 809d 	beq.w	8008be0 <_printf_i+0x1a4>
 8008aa6:	d808      	bhi.n	8008aba <_printf_i+0x7e>
 8008aa8:	296f      	cmp	r1, #111	; 0x6f
 8008aaa:	d020      	beq.n	8008aee <_printf_i+0xb2>
 8008aac:	2970      	cmp	r1, #112	; 0x70
 8008aae:	d1dd      	bne.n	8008a6c <_printf_i+0x30>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	f043 0320 	orr.w	r3, r3, #32
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	e003      	b.n	8008ac2 <_printf_i+0x86>
 8008aba:	2975      	cmp	r1, #117	; 0x75
 8008abc:	d017      	beq.n	8008aee <_printf_i+0xb2>
 8008abe:	2978      	cmp	r1, #120	; 0x78
 8008ac0:	d1d4      	bne.n	8008a6c <_printf_i+0x30>
 8008ac2:	2378      	movs	r3, #120	; 0x78
 8008ac4:	4865      	ldr	r0, [pc, #404]	; (8008c5c <_printf_i+0x220>)
 8008ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aca:	e055      	b.n	8008b78 <_printf_i+0x13c>
 8008acc:	6813      	ldr	r3, [r2, #0]
 8008ace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad2:	1d19      	adds	r1, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6011      	str	r1, [r2, #0]
 8008ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008adc:	2301      	movs	r3, #1
 8008ade:	e08c      	b.n	8008bfa <_printf_i+0x1be>
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	bf18      	it	ne
 8008aea:	b21b      	sxthne	r3, r3
 8008aec:	e7cf      	b.n	8008a8e <_printf_i+0x52>
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	6825      	ldr	r5, [r4, #0]
 8008af2:	1d18      	adds	r0, r3, #4
 8008af4:	6010      	str	r0, [r2, #0]
 8008af6:	0628      	lsls	r0, r5, #24
 8008af8:	d501      	bpl.n	8008afe <_printf_i+0xc2>
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	e002      	b.n	8008b04 <_printf_i+0xc8>
 8008afe:	0668      	lsls	r0, r5, #25
 8008b00:	d5fb      	bpl.n	8008afa <_printf_i+0xbe>
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	296f      	cmp	r1, #111	; 0x6f
 8008b06:	bf14      	ite	ne
 8008b08:	220a      	movne	r2, #10
 8008b0a:	2208      	moveq	r2, #8
 8008b0c:	4852      	ldr	r0, [pc, #328]	; (8008c58 <_printf_i+0x21c>)
 8008b0e:	2100      	movs	r1, #0
 8008b10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b14:	6865      	ldr	r5, [r4, #4]
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	60a5      	str	r5, [r4, #8]
 8008b1a:	f2c0 8095 	blt.w	8008c48 <_printf_i+0x20c>
 8008b1e:	6821      	ldr	r1, [r4, #0]
 8008b20:	f021 0104 	bic.w	r1, r1, #4
 8008b24:	6021      	str	r1, [r4, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d13d      	bne.n	8008ba6 <_printf_i+0x16a>
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	f040 808e 	bne.w	8008c4c <_printf_i+0x210>
 8008b30:	4665      	mov	r5, ip
 8008b32:	2a08      	cmp	r2, #8
 8008b34:	d10b      	bne.n	8008b4e <_printf_i+0x112>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	07db      	lsls	r3, r3, #31
 8008b3a:	d508      	bpl.n	8008b4e <_printf_i+0x112>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	6862      	ldr	r2, [r4, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	bfde      	ittt	le
 8008b44:	2330      	movle	r3, #48	; 0x30
 8008b46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b4e:	ebac 0305 	sub.w	r3, ip, r5
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	f8cd 8000 	str.w	r8, [sp]
 8008b58:	463b      	mov	r3, r7
 8008b5a:	aa03      	add	r2, sp, #12
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff fef6 	bl	8008950 <_printf_common>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d14d      	bne.n	8008c04 <_printf_i+0x1c8>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b6c:	b005      	add	sp, #20
 8008b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b72:	4839      	ldr	r0, [pc, #228]	; (8008c58 <_printf_i+0x21c>)
 8008b74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b78:	6813      	ldr	r3, [r2, #0]
 8008b7a:	6821      	ldr	r1, [r4, #0]
 8008b7c:	1d1d      	adds	r5, r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6015      	str	r5, [r2, #0]
 8008b82:	060a      	lsls	r2, r1, #24
 8008b84:	d50b      	bpl.n	8008b9e <_printf_i+0x162>
 8008b86:	07ca      	lsls	r2, r1, #31
 8008b88:	bf44      	itt	mi
 8008b8a:	f041 0120 	orrmi.w	r1, r1, #32
 8008b8e:	6021      	strmi	r1, [r4, #0]
 8008b90:	b91b      	cbnz	r3, 8008b9a <_printf_i+0x15e>
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	f022 0220 	bic.w	r2, r2, #32
 8008b98:	6022      	str	r2, [r4, #0]
 8008b9a:	2210      	movs	r2, #16
 8008b9c:	e7b7      	b.n	8008b0e <_printf_i+0xd2>
 8008b9e:	064d      	lsls	r5, r1, #25
 8008ba0:	bf48      	it	mi
 8008ba2:	b29b      	uxthmi	r3, r3
 8008ba4:	e7ef      	b.n	8008b86 <_printf_i+0x14a>
 8008ba6:	4665      	mov	r5, ip
 8008ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bac:	fb02 3311 	mls	r3, r2, r1, r3
 8008bb0:	5cc3      	ldrb	r3, [r0, r3]
 8008bb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	2900      	cmp	r1, #0
 8008bba:	d1f5      	bne.n	8008ba8 <_printf_i+0x16c>
 8008bbc:	e7b9      	b.n	8008b32 <_printf_i+0xf6>
 8008bbe:	6813      	ldr	r3, [r2, #0]
 8008bc0:	6825      	ldr	r5, [r4, #0]
 8008bc2:	1d18      	adds	r0, r3, #4
 8008bc4:	6961      	ldr	r1, [r4, #20]
 8008bc6:	6010      	str	r0, [r2, #0]
 8008bc8:	0628      	lsls	r0, r5, #24
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	d501      	bpl.n	8008bd2 <_printf_i+0x196>
 8008bce:	6019      	str	r1, [r3, #0]
 8008bd0:	e002      	b.n	8008bd8 <_printf_i+0x19c>
 8008bd2:	066a      	lsls	r2, r5, #25
 8008bd4:	d5fb      	bpl.n	8008bce <_printf_i+0x192>
 8008bd6:	8019      	strh	r1, [r3, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4665      	mov	r5, ip
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	e7b9      	b.n	8008b54 <_printf_i+0x118>
 8008be0:	6813      	ldr	r3, [r2, #0]
 8008be2:	1d19      	adds	r1, r3, #4
 8008be4:	6011      	str	r1, [r2, #0]
 8008be6:	681d      	ldr	r5, [r3, #0]
 8008be8:	6862      	ldr	r2, [r4, #4]
 8008bea:	2100      	movs	r1, #0
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 fac9 	bl	8009184 <memchr>
 8008bf2:	b108      	cbz	r0, 8008bf8 <_printf_i+0x1bc>
 8008bf4:	1b40      	subs	r0, r0, r5
 8008bf6:	6060      	str	r0, [r4, #4]
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c02:	e7a7      	b.n	8008b54 <_printf_i+0x118>
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	47c0      	blx	r8
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d0aa      	beq.n	8008b68 <_printf_i+0x12c>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	079b      	lsls	r3, r3, #30
 8008c16:	d413      	bmi.n	8008c40 <_printf_i+0x204>
 8008c18:	68e0      	ldr	r0, [r4, #12]
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	4298      	cmp	r0, r3
 8008c1e:	bfb8      	it	lt
 8008c20:	4618      	movlt	r0, r3
 8008c22:	e7a3      	b.n	8008b6c <_printf_i+0x130>
 8008c24:	2301      	movs	r3, #1
 8008c26:	464a      	mov	r2, r9
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	47c0      	blx	r8
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d09a      	beq.n	8008b68 <_printf_i+0x12c>
 8008c32:	3501      	adds	r5, #1
 8008c34:	68e3      	ldr	r3, [r4, #12]
 8008c36:	9a03      	ldr	r2, [sp, #12]
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	42ab      	cmp	r3, r5
 8008c3c:	dcf2      	bgt.n	8008c24 <_printf_i+0x1e8>
 8008c3e:	e7eb      	b.n	8008c18 <_printf_i+0x1dc>
 8008c40:	2500      	movs	r5, #0
 8008c42:	f104 0919 	add.w	r9, r4, #25
 8008c46:	e7f5      	b.n	8008c34 <_printf_i+0x1f8>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1ac      	bne.n	8008ba6 <_printf_i+0x16a>
 8008c4c:	7803      	ldrb	r3, [r0, #0]
 8008c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c56:	e76c      	b.n	8008b32 <_printf_i+0xf6>
 8008c58:	080093dd 	.word	0x080093dd
 8008c5c:	080093ee 	.word	0x080093ee

08008c60 <_putc_r>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	460d      	mov	r5, r1
 8008c64:	4614      	mov	r4, r2
 8008c66:	4606      	mov	r6, r0
 8008c68:	b118      	cbz	r0, 8008c72 <_putc_r+0x12>
 8008c6a:	6983      	ldr	r3, [r0, #24]
 8008c6c:	b90b      	cbnz	r3, 8008c72 <_putc_r+0x12>
 8008c6e:	f7ff fc4d 	bl	800850c <__sinit>
 8008c72:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <_putc_r+0x60>)
 8008c74:	429c      	cmp	r4, r3
 8008c76:	d112      	bne.n	8008c9e <_putc_r+0x3e>
 8008c78:	6874      	ldr	r4, [r6, #4]
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	da16      	bge.n	8008cb2 <_putc_r+0x52>
 8008c84:	69a2      	ldr	r2, [r4, #24]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	db02      	blt.n	8008c90 <_putc_r+0x30>
 8008c8a:	b2eb      	uxtb	r3, r5
 8008c8c:	2b0a      	cmp	r3, #10
 8008c8e:	d110      	bne.n	8008cb2 <_putc_r+0x52>
 8008c90:	4622      	mov	r2, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	4630      	mov	r0, r6
 8008c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c9a:	f000 b86b 	b.w	8008d74 <__swbuf_r>
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <_putc_r+0x64>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d101      	bne.n	8008ca8 <_putc_r+0x48>
 8008ca4:	68b4      	ldr	r4, [r6, #8]
 8008ca6:	e7e8      	b.n	8008c7a <_putc_r+0x1a>
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <_putc_r+0x68>)
 8008caa:	429c      	cmp	r4, r3
 8008cac:	bf08      	it	eq
 8008cae:	68f4      	ldreq	r4, [r6, #12]
 8008cb0:	e7e3      	b.n	8008c7a <_putc_r+0x1a>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	b2e8      	uxtb	r0, r5
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	6022      	str	r2, [r4, #0]
 8008cba:	701d      	strb	r5, [r3, #0]
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	bf00      	nop
 8008cc0:	0800938c 	.word	0x0800938c
 8008cc4:	080093ac 	.word	0x080093ac
 8008cc8:	0800936c 	.word	0x0800936c

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4c05      	ldr	r4, [pc, #20]	; (8008ce8 <_sbrk_r+0x1c>)
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	f7f7 fd5c 	bl	8000794 <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	20001494 	.word	0x20001494

08008cec <__sread>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	460c      	mov	r4, r1
 8008cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf4:	f000 faa2 	bl	800923c <_read_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	bfab      	itete	ge
 8008cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8008d00:	181b      	addge	r3, r3, r0
 8008d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d06:	bfac      	ite	ge
 8008d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d0a:	81a3      	strhlt	r3, [r4, #12]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__swrite>:
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	461f      	mov	r7, r3
 8008d14:	898b      	ldrh	r3, [r1, #12]
 8008d16:	4605      	mov	r5, r0
 8008d18:	05db      	lsls	r3, r3, #23
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	d505      	bpl.n	8008d2c <__swrite+0x1e>
 8008d20:	2302      	movs	r3, #2
 8008d22:	2200      	movs	r2, #0
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	f000 f9b6 	bl	8009098 <_lseek_r>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	4632      	mov	r2, r6
 8008d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d42:	f000 b869 	b.w	8008e18 <_write_r>

08008d46 <__sseek>:
 8008d46:	b510      	push	{r4, lr}
 8008d48:	460c      	mov	r4, r1
 8008d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4e:	f000 f9a3 	bl	8009098 <_lseek_r>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	bf15      	itete	ne
 8008d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d62:	81a3      	strheq	r3, [r4, #12]
 8008d64:	bf18      	it	ne
 8008d66:	81a3      	strhne	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__sclose>:
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 b8d3 	b.w	8008f18 <_close_r>
	...

08008d74 <__swbuf_r>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b118      	cbz	r0, 8008d86 <__swbuf_r+0x12>
 8008d7e:	6983      	ldr	r3, [r0, #24]
 8008d80:	b90b      	cbnz	r3, 8008d86 <__swbuf_r+0x12>
 8008d82:	f7ff fbc3 	bl	800850c <__sinit>
 8008d86:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <__swbuf_r+0x98>)
 8008d88:	429c      	cmp	r4, r3
 8008d8a:	d12a      	bne.n	8008de2 <__swbuf_r+0x6e>
 8008d8c:	686c      	ldr	r4, [r5, #4]
 8008d8e:	69a3      	ldr	r3, [r4, #24]
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	071a      	lsls	r2, r3, #28
 8008d96:	d52e      	bpl.n	8008df6 <__swbuf_r+0x82>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	b363      	cbz	r3, 8008df6 <__swbuf_r+0x82>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	b2f6      	uxtb	r6, r6
 8008da2:	1ac0      	subs	r0, r0, r3
 8008da4:	6963      	ldr	r3, [r4, #20]
 8008da6:	4637      	mov	r7, r6
 8008da8:	4283      	cmp	r3, r0
 8008daa:	dc04      	bgt.n	8008db6 <__swbuf_r+0x42>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f948 	bl	8009044 <_fflush_r>
 8008db4:	bb28      	cbnz	r0, 8008e02 <__swbuf_r+0x8e>
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	3001      	adds	r0, #1
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	60a3      	str	r3, [r4, #8]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	701e      	strb	r6, [r3, #0]
 8008dc6:	6963      	ldr	r3, [r4, #20]
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	d004      	beq.n	8008dd6 <__swbuf_r+0x62>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	07db      	lsls	r3, r3, #31
 8008dd0:	d519      	bpl.n	8008e06 <__swbuf_r+0x92>
 8008dd2:	2e0a      	cmp	r6, #10
 8008dd4:	d117      	bne.n	8008e06 <__swbuf_r+0x92>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f000 f933 	bl	8009044 <_fflush_r>
 8008dde:	b190      	cbz	r0, 8008e06 <__swbuf_r+0x92>
 8008de0:	e00f      	b.n	8008e02 <__swbuf_r+0x8e>
 8008de2:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <__swbuf_r+0x9c>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d101      	bne.n	8008dec <__swbuf_r+0x78>
 8008de8:	68ac      	ldr	r4, [r5, #8]
 8008dea:	e7d0      	b.n	8008d8e <__swbuf_r+0x1a>
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <__swbuf_r+0xa0>)
 8008dee:	429c      	cmp	r4, r3
 8008df0:	bf08      	it	eq
 8008df2:	68ec      	ldreq	r4, [r5, #12]
 8008df4:	e7cb      	b.n	8008d8e <__swbuf_r+0x1a>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f000 f81f 	bl	8008e3c <__swsetup_r>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d0cc      	beq.n	8008d9c <__swbuf_r+0x28>
 8008e02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e06:	4638      	mov	r0, r7
 8008e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	0800938c 	.word	0x0800938c
 8008e10:	080093ac 	.word	0x080093ac
 8008e14:	0800936c 	.word	0x0800936c

08008e18 <_write_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	2200      	movs	r2, #0
 8008e22:	4c05      	ldr	r4, [pc, #20]	; (8008e38 <_write_r+0x20>)
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7f7 fc67 	bl	80006fa <_write>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_write_r+0x1e>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_write_r+0x1e>
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20001494 	.word	0x20001494

08008e3c <__swsetup_r>:
 8008e3c:	4b32      	ldr	r3, [pc, #200]	; (8008f08 <__swsetup_r+0xcc>)
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	681d      	ldr	r5, [r3, #0]
 8008e42:	4606      	mov	r6, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	b125      	cbz	r5, 8008e52 <__swsetup_r+0x16>
 8008e48:	69ab      	ldr	r3, [r5, #24]
 8008e4a:	b913      	cbnz	r3, 8008e52 <__swsetup_r+0x16>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7ff fb5d 	bl	800850c <__sinit>
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <__swsetup_r+0xd0>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d10f      	bne.n	8008e78 <__swsetup_r+0x3c>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	0715      	lsls	r5, r2, #28
 8008e62:	d42c      	bmi.n	8008ebe <__swsetup_r+0x82>
 8008e64:	06d0      	lsls	r0, r2, #27
 8008e66:	d411      	bmi.n	8008e8c <__swsetup_r+0x50>
 8008e68:	2209      	movs	r2, #9
 8008e6a:	6032      	str	r2, [r6, #0]
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e76:	e03e      	b.n	8008ef6 <__swsetup_r+0xba>
 8008e78:	4b25      	ldr	r3, [pc, #148]	; (8008f10 <__swsetup_r+0xd4>)
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	d101      	bne.n	8008e82 <__swsetup_r+0x46>
 8008e7e:	68ac      	ldr	r4, [r5, #8]
 8008e80:	e7eb      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <__swsetup_r+0xd8>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	bf08      	it	eq
 8008e88:	68ec      	ldreq	r4, [r5, #12]
 8008e8a:	e7e6      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e8c:	0751      	lsls	r1, r2, #29
 8008e8e:	d512      	bpl.n	8008eb6 <__swsetup_r+0x7a>
 8008e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e92:	b141      	cbz	r1, 8008ea6 <__swsetup_r+0x6a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__swsetup_r+0x66>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f981 	bl	80091a4 <_free_r>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0308 	orr.w	r3, r3, #8
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <__swsetup_r+0x9a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ecc:	d003      	beq.n	8008ed6 <__swsetup_r+0x9a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f917 	bl	8009104 <__smakebuf_r>
 8008ed6:	89a2      	ldrh	r2, [r4, #12]
 8008ed8:	f012 0301 	ands.w	r3, r2, #1
 8008edc:	d00c      	beq.n	8008ef8 <__swsetup_r+0xbc>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	6963      	ldr	r3, [r4, #20]
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	61a3      	str	r3, [r4, #24]
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b953      	cbnz	r3, 8008f02 <__swsetup_r+0xc6>
 8008eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ef4:	d1ba      	bne.n	8008e6c <__swsetup_r+0x30>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	0792      	lsls	r2, r2, #30
 8008efa:	bf58      	it	pl
 8008efc:	6963      	ldrpl	r3, [r4, #20]
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	e7f2      	b.n	8008ee8 <__swsetup_r+0xac>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e7f7      	b.n	8008ef6 <__swsetup_r+0xba>
 8008f06:	bf00      	nop
 8008f08:	2000017c 	.word	0x2000017c
 8008f0c:	0800938c 	.word	0x0800938c
 8008f10:	080093ac 	.word	0x080093ac
 8008f14:	0800936c 	.word	0x0800936c

08008f18 <_close_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4c05      	ldr	r4, [pc, #20]	; (8008f34 <_close_r+0x1c>)
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f7f7 fc05 	bl	8000732 <_close>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_close_r+0x1a>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_close_r+0x1a>
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20001494 	.word	0x20001494

08008f38 <__sflush_r>:
 8008f38:	898a      	ldrh	r2, [r1, #12]
 8008f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	4605      	mov	r5, r0
 8008f40:	0710      	lsls	r0, r2, #28
 8008f42:	460c      	mov	r4, r1
 8008f44:	d458      	bmi.n	8008ff8 <__sflush_r+0xc0>
 8008f46:	684b      	ldr	r3, [r1, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc05      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc02      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f52:	2000      	movs	r0, #0
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	d0f9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f64:	682f      	ldr	r7, [r5, #0]
 8008f66:	6a21      	ldr	r1, [r4, #32]
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	d032      	beq.n	8008fd2 <__sflush_r+0x9a>
 8008f6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	075a      	lsls	r2, r3, #29
 8008f72:	d505      	bpl.n	8008f80 <__sflush_r+0x48>
 8008f74:	6863      	ldr	r3, [r4, #4]
 8008f76:	1ac0      	subs	r0, r0, r3
 8008f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f7a:	b10b      	cbz	r3, 8008f80 <__sflush_r+0x48>
 8008f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f7e:	1ac0      	subs	r0, r0, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	4602      	mov	r2, r0
 8008f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f86:	6a21      	ldr	r1, [r4, #32]
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b0      	blx	r6
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	d106      	bne.n	8008fa0 <__sflush_r+0x68>
 8008f92:	6829      	ldr	r1, [r5, #0]
 8008f94:	291d      	cmp	r1, #29
 8008f96:	d848      	bhi.n	800902a <__sflush_r+0xf2>
 8008f98:	4a29      	ldr	r2, [pc, #164]	; (8009040 <__sflush_r+0x108>)
 8008f9a:	40ca      	lsrs	r2, r1
 8008f9c:	07d6      	lsls	r6, r2, #31
 8008f9e:	d544      	bpl.n	800902a <__sflush_r+0xf2>
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	6062      	str	r2, [r4, #4]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	04d9      	lsls	r1, r3, #19
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	d504      	bpl.n	8008fb6 <__sflush_r+0x7e>
 8008fac:	1c42      	adds	r2, r0, #1
 8008fae:	d101      	bne.n	8008fb4 <__sflush_r+0x7c>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b903      	cbnz	r3, 8008fb6 <__sflush_r+0x7e>
 8008fb4:	6560      	str	r0, [r4, #84]	; 0x54
 8008fb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb8:	602f      	str	r7, [r5, #0]
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d0c9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008fbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc2:	4299      	cmp	r1, r3
 8008fc4:	d002      	beq.n	8008fcc <__sflush_r+0x94>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f8ec 	bl	80091a4 <_free_r>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd0:	e7c0      	b.n	8008f54 <__sflush_r+0x1c>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b0      	blx	r6
 8008fd8:	1c41      	adds	r1, r0, #1
 8008fda:	d1c8      	bne.n	8008f6e <__sflush_r+0x36>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c5      	beq.n	8008f6e <__sflush_r+0x36>
 8008fe2:	2b1d      	cmp	r3, #29
 8008fe4:	d001      	beq.n	8008fea <__sflush_r+0xb2>
 8008fe6:	2b16      	cmp	r3, #22
 8008fe8:	d101      	bne.n	8008fee <__sflush_r+0xb6>
 8008fea:	602f      	str	r7, [r5, #0]
 8008fec:	e7b1      	b.n	8008f52 <__sflush_r+0x1a>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	e7ad      	b.n	8008f54 <__sflush_r+0x1c>
 8008ff8:	690f      	ldr	r7, [r1, #16]
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	d0a9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008ffe:	0793      	lsls	r3, r2, #30
 8009000:	bf18      	it	ne
 8009002:	2300      	movne	r3, #0
 8009004:	680e      	ldr	r6, [r1, #0]
 8009006:	bf08      	it	eq
 8009008:	694b      	ldreq	r3, [r1, #20]
 800900a:	eba6 0807 	sub.w	r8, r6, r7
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	608b      	str	r3, [r1, #8]
 8009012:	f1b8 0f00 	cmp.w	r8, #0
 8009016:	dd9c      	ble.n	8008f52 <__sflush_r+0x1a>
 8009018:	4643      	mov	r3, r8
 800901a:	463a      	mov	r2, r7
 800901c:	6a21      	ldr	r1, [r4, #32]
 800901e:	4628      	mov	r0, r5
 8009020:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009022:	47b0      	blx	r6
 8009024:	2800      	cmp	r0, #0
 8009026:	dc06      	bgt.n	8009036 <__sflush_r+0xfe>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009034:	e78e      	b.n	8008f54 <__sflush_r+0x1c>
 8009036:	4407      	add	r7, r0
 8009038:	eba8 0800 	sub.w	r8, r8, r0
 800903c:	e7e9      	b.n	8009012 <__sflush_r+0xda>
 800903e:	bf00      	nop
 8009040:	20400001 	.word	0x20400001

08009044 <_fflush_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	690b      	ldr	r3, [r1, #16]
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b1db      	cbz	r3, 8009086 <_fflush_r+0x42>
 800904e:	b118      	cbz	r0, 8009058 <_fflush_r+0x14>
 8009050:	6983      	ldr	r3, [r0, #24]
 8009052:	b90b      	cbnz	r3, 8009058 <_fflush_r+0x14>
 8009054:	f7ff fa5a 	bl	800850c <__sinit>
 8009058:	4b0c      	ldr	r3, [pc, #48]	; (800908c <_fflush_r+0x48>)
 800905a:	429c      	cmp	r4, r3
 800905c:	d109      	bne.n	8009072 <_fflush_r+0x2e>
 800905e:	686c      	ldr	r4, [r5, #4]
 8009060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009064:	b17b      	cbz	r3, 8009086 <_fflush_r+0x42>
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906e:	f7ff bf63 	b.w	8008f38 <__sflush_r>
 8009072:	4b07      	ldr	r3, [pc, #28]	; (8009090 <_fflush_r+0x4c>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d101      	bne.n	800907c <_fflush_r+0x38>
 8009078:	68ac      	ldr	r4, [r5, #8]
 800907a:	e7f1      	b.n	8009060 <_fflush_r+0x1c>
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_fflush_r+0x50>)
 800907e:	429c      	cmp	r4, r3
 8009080:	bf08      	it	eq
 8009082:	68ec      	ldreq	r4, [r5, #12]
 8009084:	e7ec      	b.n	8009060 <_fflush_r+0x1c>
 8009086:	2000      	movs	r0, #0
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	0800938c 	.word	0x0800938c
 8009090:	080093ac 	.word	0x080093ac
 8009094:	0800936c 	.word	0x0800936c

08009098 <_lseek_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4605      	mov	r5, r0
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	2200      	movs	r2, #0
 80090a2:	4c05      	ldr	r4, [pc, #20]	; (80090b8 <_lseek_r+0x20>)
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f7 fb67 	bl	800077a <_lseek>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_lseek_r+0x1e>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_lseek_r+0x1e>
 80090b4:	602b      	str	r3, [r5, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20001494 	.word	0x20001494

080090bc <__swhatbuf_r>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	460e      	mov	r6, r1
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	b096      	sub	sp, #88	; 0x58
 80090c6:	2900      	cmp	r1, #0
 80090c8:	4614      	mov	r4, r2
 80090ca:	461d      	mov	r5, r3
 80090cc:	da07      	bge.n	80090de <__swhatbuf_r+0x22>
 80090ce:	2300      	movs	r3, #0
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	89b3      	ldrh	r3, [r6, #12]
 80090d4:	061a      	lsls	r2, r3, #24
 80090d6:	d410      	bmi.n	80090fa <__swhatbuf_r+0x3e>
 80090d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090dc:	e00e      	b.n	80090fc <__swhatbuf_r+0x40>
 80090de:	466a      	mov	r2, sp
 80090e0:	f000 f8be 	bl	8009260 <_fstat_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	dbf2      	blt.n	80090ce <__swhatbuf_r+0x12>
 80090e8:	9a01      	ldr	r2, [sp, #4]
 80090ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090f2:	425a      	negs	r2, r3
 80090f4:	415a      	adcs	r2, r3
 80090f6:	602a      	str	r2, [r5, #0]
 80090f8:	e7ee      	b.n	80090d8 <__swhatbuf_r+0x1c>
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	2000      	movs	r0, #0
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	b016      	add	sp, #88	; 0x58
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__smakebuf_r>:
 8009104:	898b      	ldrh	r3, [r1, #12]
 8009106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009108:	079d      	lsls	r5, r3, #30
 800910a:	4606      	mov	r6, r0
 800910c:	460c      	mov	r4, r1
 800910e:	d507      	bpl.n	8009120 <__smakebuf_r+0x1c>
 8009110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	2301      	movs	r3, #1
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	b002      	add	sp, #8
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	ab01      	add	r3, sp, #4
 8009122:	466a      	mov	r2, sp
 8009124:	f7ff ffca 	bl	80090bc <__swhatbuf_r>
 8009128:	9900      	ldr	r1, [sp, #0]
 800912a:	4605      	mov	r5, r0
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff fa77 	bl	8008620 <_malloc_r>
 8009132:	b948      	cbnz	r0, 8009148 <__smakebuf_r+0x44>
 8009134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009138:	059a      	lsls	r2, r3, #22
 800913a:	d4ef      	bmi.n	800911c <__smakebuf_r+0x18>
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	f043 0302 	orr.w	r3, r3, #2
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	e7e3      	b.n	8009110 <__smakebuf_r+0xc>
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <__smakebuf_r+0x7c>)
 800914a:	62b3      	str	r3, [r6, #40]	; 0x28
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	6020      	str	r0, [r4, #0]
 8009150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	9b00      	ldr	r3, [sp, #0]
 8009158:	6120      	str	r0, [r4, #16]
 800915a:	6163      	str	r3, [r4, #20]
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	b15b      	cbz	r3, 8009178 <__smakebuf_r+0x74>
 8009160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009164:	4630      	mov	r0, r6
 8009166:	f000 f88d 	bl	8009284 <_isatty_r>
 800916a:	b128      	cbz	r0, 8009178 <__smakebuf_r+0x74>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	431d      	orrs	r5, r3
 800917c:	81a5      	strh	r5, [r4, #12]
 800917e:	e7cd      	b.n	800911c <__smakebuf_r+0x18>
 8009180:	080084d5 	.word	0x080084d5

08009184 <memchr>:
 8009184:	b510      	push	{r4, lr}
 8009186:	b2c9      	uxtb	r1, r1
 8009188:	4402      	add	r2, r0
 800918a:	4290      	cmp	r0, r2
 800918c:	4603      	mov	r3, r0
 800918e:	d101      	bne.n	8009194 <memchr+0x10>
 8009190:	2300      	movs	r3, #0
 8009192:	e003      	b.n	800919c <memchr+0x18>
 8009194:	781c      	ldrb	r4, [r3, #0]
 8009196:	3001      	adds	r0, #1
 8009198:	428c      	cmp	r4, r1
 800919a:	d1f6      	bne.n	800918a <memchr+0x6>
 800919c:	4618      	mov	r0, r3
 800919e:	bd10      	pop	{r4, pc}

080091a0 <__malloc_lock>:
 80091a0:	4770      	bx	lr

080091a2 <__malloc_unlock>:
 80091a2:	4770      	bx	lr

080091a4 <_free_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4605      	mov	r5, r0
 80091a8:	2900      	cmp	r1, #0
 80091aa:	d043      	beq.n	8009234 <_free_r+0x90>
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f0c      	subs	r4, r1, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfb8      	it	lt
 80091b6:	18e4      	addlt	r4, r4, r3
 80091b8:	f7ff fff2 	bl	80091a0 <__malloc_lock>
 80091bc:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <_free_r+0x94>)
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	4610      	mov	r0, r2
 80091c2:	b933      	cbnz	r3, 80091d2 <_free_r+0x2e>
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	6014      	str	r4, [r2, #0]
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f7ff bfe8 	b.w	80091a2 <__malloc_unlock>
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	d90b      	bls.n	80091ee <_free_r+0x4a>
 80091d6:	6821      	ldr	r1, [r4, #0]
 80091d8:	1862      	adds	r2, r4, r1
 80091da:	4293      	cmp	r3, r2
 80091dc:	bf01      	itttt	eq
 80091de:	681a      	ldreq	r2, [r3, #0]
 80091e0:	685b      	ldreq	r3, [r3, #4]
 80091e2:	1852      	addeq	r2, r2, r1
 80091e4:	6022      	streq	r2, [r4, #0]
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	6004      	str	r4, [r0, #0]
 80091ea:	e7ed      	b.n	80091c8 <_free_r+0x24>
 80091ec:	4613      	mov	r3, r2
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	b10a      	cbz	r2, 80091f6 <_free_r+0x52>
 80091f2:	42a2      	cmp	r2, r4
 80091f4:	d9fa      	bls.n	80091ec <_free_r+0x48>
 80091f6:	6819      	ldr	r1, [r3, #0]
 80091f8:	1858      	adds	r0, r3, r1
 80091fa:	42a0      	cmp	r0, r4
 80091fc:	d10b      	bne.n	8009216 <_free_r+0x72>
 80091fe:	6820      	ldr	r0, [r4, #0]
 8009200:	4401      	add	r1, r0
 8009202:	1858      	adds	r0, r3, r1
 8009204:	4282      	cmp	r2, r0
 8009206:	6019      	str	r1, [r3, #0]
 8009208:	d1de      	bne.n	80091c8 <_free_r+0x24>
 800920a:	6810      	ldr	r0, [r2, #0]
 800920c:	6852      	ldr	r2, [r2, #4]
 800920e:	4401      	add	r1, r0
 8009210:	6019      	str	r1, [r3, #0]
 8009212:	605a      	str	r2, [r3, #4]
 8009214:	e7d8      	b.n	80091c8 <_free_r+0x24>
 8009216:	d902      	bls.n	800921e <_free_r+0x7a>
 8009218:	230c      	movs	r3, #12
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	e7d4      	b.n	80091c8 <_free_r+0x24>
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1821      	adds	r1, r4, r0
 8009222:	428a      	cmp	r2, r1
 8009224:	bf01      	itttt	eq
 8009226:	6811      	ldreq	r1, [r2, #0]
 8009228:	6852      	ldreq	r2, [r2, #4]
 800922a:	1809      	addeq	r1, r1, r0
 800922c:	6021      	streq	r1, [r4, #0]
 800922e:	6062      	str	r2, [r4, #4]
 8009230:	605c      	str	r4, [r3, #4]
 8009232:	e7c9      	b.n	80091c8 <_free_r+0x24>
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	20000424 	.word	0x20000424

0800923c <_read_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4605      	mov	r5, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	2200      	movs	r2, #0
 8009246:	4c05      	ldr	r4, [pc, #20]	; (800925c <_read_r+0x20>)
 8009248:	6022      	str	r2, [r4, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f7 fa38 	bl	80006c0 <_read>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_read_r+0x1e>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b103      	cbz	r3, 800925a <_read_r+0x1e>
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20001494 	.word	0x20001494

08009260 <_fstat_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	2300      	movs	r3, #0
 8009264:	4c06      	ldr	r4, [pc, #24]	; (8009280 <_fstat_r+0x20>)
 8009266:	4605      	mov	r5, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	f7f7 fa6b 	bl	8000748 <_fstat>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d102      	bne.n	800927c <_fstat_r+0x1c>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	b103      	cbz	r3, 800927c <_fstat_r+0x1c>
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	bd38      	pop	{r3, r4, r5, pc}
 800927e:	bf00      	nop
 8009280:	20001494 	.word	0x20001494

08009284 <_isatty_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	2300      	movs	r3, #0
 8009288:	4c05      	ldr	r4, [pc, #20]	; (80092a0 <_isatty_r+0x1c>)
 800928a:	4605      	mov	r5, r0
 800928c:	4608      	mov	r0, r1
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	f7f7 fa69 	bl	8000766 <_isatty>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_isatty_r+0x1a>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	b103      	cbz	r3, 800929e <_isatty_r+0x1a>
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20001494 	.word	0x20001494

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
